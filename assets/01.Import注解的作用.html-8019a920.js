import{_ as n,V as a,W as s,X as e}from"./framework-a569e214.js";const o="/img/springboot-code/image-20221231153337204.png",t="/img/springboot-code/image-20221231153459391.png",p={},c=e(`<h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>注解的定义信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Import</span> <span class="token punctuation">{</span>

   <span class="token doc-comment comment">/**
    * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Configuration</span></span> @Configuration<span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ImportSelector</span></span><span class="token punctuation">}</span>,
    * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ImportBeanDefinitionRegistrar</span></span><span class="token punctuation">}</span>, or regular component classes to import.
    */</span>
   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，传入参数是一个Class数组。所以，我们可以传入多个Class对象。</p><p>查看该注解的注释信息，就可以发现其作用：</p><ul><li>导入一个或多个组件类——通常是@Configuration类。</li><li>提供与Spring XML中的元素等效的功能。允许导入<code>@Configuration</code>类，<code>ImportSelector</code>和<code>ImportBeanDefinitionRegistrar</code>实现，以及<code>常规组件类</code>。</li><li>在导入的<code>@Configuration</code>类中声明的<code>@Bean</code>定义应该通过使用<code>@Autowired</code>注入来访问。可以自动连接bean本身，也可以自动连接声明bean的配置类实例。后一种方法允许在@Configuration类方法之间显式的、ide友好的导航。</li><li>可以在类级别声明，也可以作为元注释声明。</li><li>如果需要导入XML或其他non-@Configuration bean定义资源，则使用@ImportResource注释。</li></ul><p>也就是说，<code>@Import</code>注解可以往容器中导入bean，可以根据需要选择不同的方式。</p><h2 id="导入-configuration配置类" tabindex="-1"><a class="header-anchor" href="#导入-configuration配置类" aria-hidden="true">#</a> 导入@Configuration配置类</h2><p>SpringBoot默认会扫描主启动类所在的包以及子包下的加了相应注解的bean。<code>如果不是在默认的包下的bean，是不会被加载到容器中的。</code>这时，我们可以使用<code>@Import</code>注解导入，此时导入的类可以在任意的包下。</p><p>一般用于导入配置类，我们导入一个试试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// SimpleConfig在com包下,主启动类在com.sanfen包下，不同包</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1226999203</span><span class="token punctuation">,</span> <span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在主启动类中获取<code>SimpleConfig</code>和<code>User</code>，发现没有被扫描到：</p><figure><img src="`+o+'" alt="image-20221231153337204" tabindex="0" loading="lazy"><figcaption>image-20221231153337204</figcaption></figure><p>我们加上<code>@Import</code>注解：</p><figure><img src="'+t+'" alt="image-20221231153459391" tabindex="0" loading="lazy"><figcaption>image-20221231153459391</figcaption></figure><p>发现<code>SimpleConfig</code>这个配置类被导入了，而且里面定义的bean也被导入了。</p>',16),i=[c];function l(u,r){return a(),s("div",null,i)}const k=n(p,[["render",l],["__file","01.Import注解的作用.html.vue"]]);export{k as default};
