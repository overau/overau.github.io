import{_ as n,V as a,W as s,X as p}from"./framework-a569e214.js";const t="/img/springboot-code/image-20221230140518404.png",e="/img/springboot-code/image-20221230140656380.png",o="/img/springboot-code/image-20221230140914816.png",i="/img/springboot-code/image-20221230141504502.png",c="/img/springboot-code/image-20221230141702482.png",l="/img/springboot-code/image-20221230141849617.png",r="/img/springboot-code/image-20221230141954076.png",u="/img/springboot-code/image-20221230142359733.png",g="/img/springboot-code/image-20221230142538161.png",d="/img/springboot-code/image-20221230143527584.png",k="/img/springboot-code/image-20221230143640017.png",m={},b=p(`<h2 id="搭建springboot工程" tabindex="-1"><a class="header-anchor" href="#搭建springboot工程" aria-hidden="true">#</a> 搭建SpringBoot工程</h2><p>1.引入依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.配置文件<code>application.yml</code>。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.主启动类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootAnalysisApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SpringBootAnalysisApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootAnalysisApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;user: {}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1654324663</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们向Spring容器中注入了一个User。先看看结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">13</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">58.953</span>  <span class="token constant">INFO</span> <span class="token number">6796</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sanfen<span class="token punctuation">.</span></span>SpringBootAnalysisApp</span>         <span class="token operator">:</span> user<span class="token operator">:</span> <span class="token class-name">User</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1654324663</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;张三&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来我们看看这个bean对象是怎么注册到容器的。</p><h2 id="探究目标" tabindex="-1"><a class="header-anchor" href="#探究目标" aria-hidden="true">#</a> 探究目标</h2><p>SpringBoot基于Spring设计，不仅继承了Spring框架原有的优秀特性，而且还通过简化配置来进一步简化了Spring应用的整个搭建和开发过程。我们想知道<code>在SpringBoot中，Spring容器是怎么创建和获取bean的</code>。</p><h2 id="springboot中bean的创建" tabindex="-1"><a class="header-anchor" href="#springboot中bean的创建" aria-hidden="true">#</a> SpringBoot中bean的创建</h2><p>在Spring中，容器中bean的创建是在加载配置文件这一行代码。SpringBoot中同样是在这一行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootAnalysisApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后面是直接从Spring容器中获取的。</p><figure><img src="`+t+'" alt="image-20221230140518404" tabindex="0" loading="lazy"><figcaption>image-20221230140518404</figcaption></figure><blockquote><p>1.进入<code>SpringApplication</code>的<code>run()</code>方法，参数是我们主启动类的Class对象。</p></blockquote><figure><img src="'+e+'" alt="image-20221230140656380" tabindex="0" loading="lazy"><figcaption>image-20221230140656380</figcaption></figure><p>进入具体的<code>run()</code>方法：</p><figure><img src="'+o+'" alt="image-20221230140914816" tabindex="0" loading="lazy"><figcaption>image-20221230140914816</figcaption></figure><p>重点关注<code>context</code>的填充：</p><figure><img src="'+i+'" alt="image-20221230141504502" tabindex="0" loading="lazy"><figcaption>image-20221230141504502</figcaption></figure><figure><img src="'+c+'" alt="image-20221230141702482" tabindex="0" loading="lazy"><figcaption>image-20221230141702482</figcaption></figure><p>执行完这行之后，<code>context</code>就可以获取到User对象了。进去看看。</p><p>进入<code>refreshContext()</code>方法：</p><figure><img src="'+l+'" alt="image-20221230141849617" tabindex="0" loading="lazy"><figcaption>image-20221230141849617</figcaption></figure><p>进入<code>refresh()</code>方法：</p><figure><img src="'+r+'" alt="image-20221230141954076" tabindex="0" loading="lazy"><figcaption>image-20221230141954076</figcaption></figure><p>这里会调用<code>applicationContext</code>应用上下文，也就是容器底层的<code>refresh()</code>方法。在Spring源码的探究中，同样是调用ApplicationContext的<code>refresh()</code>方法。这里就进入了Spring的部分。</p><blockquote><p>2.进入<code>ServletWebServerApplicationContext</code>的<code>refresh()</code>方法。</p></blockquote><figure><img src="'+u+'" alt="image-20221230142359733" tabindex="0" loading="lazy"><figcaption>image-20221230142359733</figcaption></figure><blockquote><p>3.进入<code>AbstractApplicationContext</code>中的<code>refresh()</code>方法。</p></blockquote><figure><img src="'+g+'" alt="image-20221230142538161" tabindex="0" loading="lazy"><figcaption>image-20221230142538161</figcaption></figure><p>这不就是我们看Spring的源码中，所说的那个Spring中bean的关键创建方法是<code>AbstractApplicationContext</code>中的<code>refresh()</code>，这里定义了bean的整个生命周期的代码。所以SpringBoot中Spring容器的创建跟Spring是完全一样的。只不过SpringBoot多包装了几层。</p><p>可以进行总结了：</p><ul><li>SpringBoot是基于Spring实现的，所以SpringBoot中的容器就是Spring容器，底层跟Spring中的创建方式完全一样。</li><li>有一个关键对象<code>ApplicationContext</code>，里面存储着创建的bean，我们可以从里面获取。</li></ul><h2 id="springboot中bean的获取" tabindex="-1"><a class="header-anchor" href="#springboot中bean的获取" aria-hidden="true">#</a> SpringBoot中bean的获取</h2><p>SpringBoot中的容器就是Spring容器，那么可以猜测，获取bean的时候也是从Map中获取。我们详细看一下SpringBoot是怎么做的。</p><figure><img src="'+d+'" alt="image-20221230143527584" tabindex="0" loading="lazy"><figcaption>image-20221230143527584</figcaption></figure><p>直接就进入了<code>AbstractApplicationContext</code>中的<code>getBean()</code>方法：</p><figure><img src="'+k+'" alt="image-20221230143640017" tabindex="0" loading="lazy"><figcaption>image-20221230143640017</figcaption></figure><p>这跟Spring中bean的获取是完全一样的。同样的方法，同样的类。到这里我们应该明白了，为什么说SpringBoot是对Spring的封装。</p>',43),v=[b];function f(_,S){return a(),s("div",null,v)}const x=n(m,[["render",f],["__file","01.SpringBoot容器的创建和获取.html.vue"]]);export{x as default};
