import{_ as e,V as i,W as t,Y as n,Z as a,$ as o,X as p,F as c}from"./framework-a569e214.js";const l="/img/spring-code/image-20221228160046316.png",u="/img/spring-code/image-20221228160331136.png",r="/img/spring-code/image-20221228161209430.png",g="/img/spring-code/image-20221228161557444.png",d="/img/spring-code/image-20221228162203217.png",m="/img/spring-code/image-20221228162552884.png",k="/img/spring-code/image-20221228163011319.png",b="/img/spring-code/image-20221228163238561.png",f="/img/spring-code/image-20221228163535021.png",v="/img/spring-code/image-20221228163735286.png",y="/img/spring-code/image-20221228163855759.png",_="/img/spring-code/image-20221228164150776.png",h="/img/spring-code/image-20221228164251049.png",x="/img/spring-code/image-20221228164517609.png",q="/img/spring-code/image-20221228164700606.png",B="/img/spring-code/image-20221228164825125.png",z="/img/spring-code/image-20221228170235448.png",w="/img/spring-code/image-20221228171152443.png",F="/img/spring-code/image-20221228171511758.png",A="/img/spring-code/image-20221228171809985.png",C="/img/spring-code/image-20221228171942163.png",S="/img/spring-code/image-20221228172438304.png",D="/img/spring-code/image-20221228172605671.png",I="/img/spring-code/image-20221228172808941.png",P="/img/spring-code/image-20221228173041234.png",L="/img/spring-code/image-20221228173409851.png",E="/img/spring-code/image-20221228174422375.png",R="/img/spring-code/image-20221228174939947.png",V="/img/spring-code/image-20221228175347836.png",M="/img/spring-code/image-20221228175640424.png",j="/img/spring-code/image-20221228180038496.png",N="/img/spring-code/image-20221228180258445.png",U="/img/spring-code/image-20221228180456332.png",G="/img/spring-code/image-20221228180544412.png",H={},W={class:"hint-container tip"},X=n("p",{class:"hint-container-title"},"提示",-1),Z={href:"https://www.bilibili.com/video/BV1Bq4y1Q7GZ",target:"_blank",rel:"noopener noreferrer"},Q=p(`<h2 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.sanfen.entity.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2233<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>27<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SpringDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;user对象: [{}]&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="探究目标" tabindex="-1"><a class="header-anchor" href="#探究目标" aria-hidden="true">#</a> 探究目标</h2><p>我们在Spring中配置好bean之后，就可以通过bean的名称或者Class获取bean对象。现在想知道，这个<code>bean是在什么时候创建的</code>？<code>bean是怎么创建</code>的？</p><h2 id="bean是在什么时候被创建的" tabindex="-1"><a class="header-anchor" href="#bean是在什么时候被创建的" aria-hidden="true">#</a> bean是在什么时候被创建的</h2><p>这个比较简单，我们写的代码就几行。可以发现第一行是处理spring的配置文件，第二行是获取bean。debug调试，看是在哪一行代码创建的。</p><figure><img src="`+l+'" alt="image-20221228160046316" tabindex="0" loading="lazy"><figcaption>image-20221228160046316</figcaption></figure><p>执行这行代码，看<code>User</code>有没有被创建：</p><figure><img src="'+u+'" alt="image-20221228160331136" tabindex="0" loading="lazy"><figcaption>image-20221228160331136</figcaption></figure><p>由此，可以得出结论。</p><blockquote><p>Spring中的bean是在加载配置文件的时候创建的，之后通过getBean直接获取这个创建的bean。</p></blockquote><h2 id="bean是怎么创建的" tabindex="-1"><a class="header-anchor" href="#bean是怎么创建的" aria-hidden="true">#</a> bean是怎么创建的</h2><p>现在，我们可以进入源码，看看bean具体是怎么创建的。也不必看得很深，看到我们熟悉的代码就行了。也不用每行代码都看，关注主要的部分：<code>bean的创建</code>。</p><blockquote><p>1.进入<code>ClassPathXmlApplicationContext</code>。接下来是<code>refresh()方法</code>。</p></blockquote><p>我们可以通过执行这行代码之后，查看容器中有没有对应的bean。来发现具体的执行代码。通过调试，我们发现。执行完<code>refresh()</code>之后，<code>User</code>被创建了。关键代码在这里：</p><figure><img src="'+r+'" alt="image-20221228161209430" tabindex="0" loading="lazy"><figcaption>image-20221228161209430</figcaption></figure><blockquote><p>2.进入<code>AbstractApplicationContext</code>。这个类里面的<code>refresh()</code>是最关键的，几乎整个bean的生命周期的代码都在这里，我们这次只关注bean的创建。</p></blockquote><figure><img src="'+g+'" alt="image-20221228161557444" tabindex="0" loading="lazy"><figcaption>image-20221228161557444</figcaption></figure><p>进入<code>finishBeanFactoryInitialization()</code>方法：</p><figure><img src="'+d+'" alt="image-20221228162203217" tabindex="0" loading="lazy"><figcaption>image-20221228162203217</figcaption></figure><blockquote><p>3.进入<code>DefaultListableBeanFactory</code>。</p></blockquote><figure><img src="'+m+'" alt="image-20221228162552884" tabindex="0" loading="lazy"><figcaption>image-20221228162552884</figcaption></figure><p>可以发现这里有个集合<code>beanDefinitionNames</code>，里面存储了bean的名字。接下来是实例化bean：</p><figure><img src="'+k+'" alt="image-20221228163011319" tabindex="0" loading="lazy"><figcaption>image-20221228163011319</figcaption></figure><p>循环体内，首先会根据bean的名称获取到<code>BeanDefinition</code>，这个我们先看看里面有什么东西：</p><figure><img src="'+b+'" alt="image-20221228163238561" tabindex="0" loading="lazy"><figcaption>image-20221228163238561</figcaption></figure><p>可以发现，这个<code>BeanDefinition</code>就是我们在Spring配置文件中配置的bean标签。这里把xml文件里面的配置转换成了<code>BeanDefinition</code>对象的属性。可以猜测，后面会根据这个配置对象生成bean。<code>BeanDefinition</code>是很重要的，它包含了bean的定义信息。不过这次我们不关注，我们主要看bean是怎么创建的。往下看：</p><figure><img src="'+f+'" alt="image-20221228163535021" tabindex="0" loading="lazy"><figcaption>image-20221228163535021</figcaption></figure><p>因为我们是默认配置，所以没有走<code>FactoryBean</code>的逻辑。<code>FactoryBean</code>也是重点，这次也不关注。再往下看。</p><blockquote><p>4.进入<code>AbstractBeanFactory</code>。</p></blockquote><figure><img src="'+v+'" alt="image-20221228163735286" tabindex="0" loading="lazy"><figcaption>image-20221228163735286</figcaption></figure><p><code>doGetBean()</code>方法：</p><p>首先获取bean的名字：</p><figure><img src="'+y+'" alt="image-20221228163855759" tabindex="0" loading="lazy"><figcaption>image-20221228163855759</figcaption></figure><p>接下来是一堆的检查判断，走到关键代码：</p><figure><img src="'+_+'" alt="image-20221228164150776" tabindex="0" loading="lazy"><figcaption>image-20221228164150776</figcaption></figure><p>进入<code>createBean()</code>方法：</p><figure><img src="'+h+'" alt="image-20221228164251049" tabindex="0" loading="lazy"><figcaption>image-20221228164251049</figcaption></figure><blockquote><p>5.进入<code>AbstractAutowireCapableBeanFactory</code>的<code>createBean()</code>。</p></blockquote><p>找到关键代码：</p><figure><img src="'+x+'" alt="image-20221228164517609" tabindex="0" loading="lazy"><figcaption>image-20221228164517609</figcaption></figure><p>进入<code>doCreateBean()</code>：</p><figure><img src="'+q+'" alt="image-20221228164700606" tabindex="0" loading="lazy"><figcaption>image-20221228164700606</figcaption></figure><p>接下来获取bean的类型：</p><figure><img src="'+B+'" alt="image-20221228164825125" tabindex="0" loading="lazy"><figcaption>image-20221228164825125</figcaption></figure><blockquote><p>这里我们可以得出一个结论：bean的实例化是先创建空对象，然后再填充属性。</p></blockquote><p>再往下走，可以发现这里提到了循环引用：</p><figure><img src="'+z+'" alt="image-20221228170235448" tabindex="0" loading="lazy"><figcaption>image-20221228170235448</figcaption></figure><p>接下里是填充bean的属性：</p><figure><img src="'+w+'" alt="image-20221228171152443" tabindex="0" loading="lazy"><figcaption>image-20221228171152443</figcaption></figure><p>调用<code>applyPropertyValues()</code>方法：</p><figure><img src="'+F+'" alt="image-20221228171511758" tabindex="0" loading="lazy"><figcaption>image-20221228171511758</figcaption></figure><p>深拷贝填充属性：</p><figure><img src="'+A+'" alt="image-20221228171809985" tabindex="0" loading="lazy"><figcaption>image-20221228171809985</figcaption></figure><p>BeanWrapper设置属性：</p><figure><img src="'+C+'" alt="image-20221228171942163" tabindex="0" loading="lazy"><figcaption>image-20221228171942163</figcaption></figure><p>属性填充完毕。会放到对应的<code>BeanDefinition</code>中。接下里进行bean的初始化。</p><figure><img src="'+S+'" alt="image-20221228172438304" tabindex="0" loading="lazy"><figcaption>image-20221228172438304</figcaption></figure><p><code>AbstractAutowireCapableBeanFactory</code>中。也可以发现，之前的对象属性有了值：</p><figure><img src="'+D+'" alt="image-20221228172605671" tabindex="0" loading="lazy"><figcaption>image-20221228172605671</figcaption></figure><p>进入<code>initializeBean()</code>方法，通过<code>bean名称</code>，<code>bean对象</code>，<code>BeanDefinition</code>进行bean的初始化。</p><figure><img src="'+I+'" alt="image-20221228172808941" tabindex="0" loading="lazy"><figcaption>image-20221228172808941</figcaption></figure><p>首先会填充Aware接口相关的资源：</p><figure><img src="'+P+'" alt="image-20221228173041234" tabindex="0" loading="lazy"><figcaption>image-20221228173041234</figcaption></figure><p>接下里进行bean的初始化方法调用，而且在bean的初始化方法前后都会调用bean后置处理器。</p><figure><img src="'+L+'" alt="image-20221228173409851" tabindex="0" loading="lazy"><figcaption>image-20221228173409851</figcaption></figure><p>由此我们可以得出结论：</p><blockquote><p>bean的创建有这几个步骤：</p><ul><li>首先会创建实例，然后再填充这个实例的属性。</li><li>如果实现了Aware接口，会填充对应的资源。</li><li>调用bean的初始化方法，并且调用初始化方法前后都会调用bean的后置处理器。bean的初始化方法是指bean在创建之后调用的方法。比如实现<code> InitializingBean/DisposableBean</code> 接口</li></ul></blockquote><p><code>doCreateBean()</code>方法中，接下来继续往下走：</p><figure><img src="'+E+'" alt="image-20221228174422375" tabindex="0" loading="lazy"><figcaption>image-20221228174422375</figcaption></figure><p>接下进行返回。</p><blockquote><p>6.<code>AbstractAutowireCapableBeanFactory</code>中。</p></blockquote><figure><img src="'+R+'" alt="image-20221228174939947" tabindex="0" loading="lazy"><figcaption>image-20221228174939947</figcaption></figure><blockquote><p>7.进入<code>DefaultSingletonBeanRegistry</code>的<code>getSingleton()</code>方法：</p></blockquote><figure><img src="'+V+'" alt="image-20221228175347836" tabindex="0" loading="lazy"><figcaption>image-20221228175347836</figcaption></figure><p>进入<code>addSingleton()方法</code>：</p><figure><img src="'+M+'" alt="image-20221228175640424" tabindex="0" loading="lazy"><figcaption>image-20221228175640424</figcaption></figure><p>到了这里，发现Spring把创建的单例bean放入了一个HashMap中。key是bean的名称，value是bean对象。我们是可以通过bean的名称获取到bean。到这里就明白为什么能获取到了。就是对HashMap的操作。只不过Spring在把bean对象放入Map之前，做了大量的工作。</p><blockquote><p>8.返回到<code>AbstractBeanFactory</code>中。</p></blockquote><figure><img src="'+j+'" alt="image-20221228180038496" tabindex="0" loading="lazy"><figcaption>image-20221228180038496</figcaption></figure><p>接下来Spring还会做相关的工作来保证bean的正常使用。</p><blockquote><p>9.返回到<code>DefaultListableBeanFactory</code>。这时，容器中已经有了bean。</p></blockquote><figure><img src="'+N+'" alt="image-20221228180258445" tabindex="0" loading="lazy"><figcaption>image-20221228180258445</figcaption></figure><blockquote><p>10.返回到<code>AbstractApplicationContext</code>中。</p></blockquote><figure><img src="'+U+'" alt="image-20221228180456332" tabindex="0" loading="lazy"><figcaption>image-20221228180456332</figcaption></figure><p>bean的创建就完成了。</p><figure><img src="'+G+`" alt="image-20221228180544412" tabindex="0" loading="lazy"><figcaption>image-20221228180544412</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><p>bean的创建关键方法是<code>AbstractApplicationContext</code>中的<code>refresh()</code>方法。这里定义了bean的整个生命周期的代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">{</span>
   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Prepare this context for refreshing.</span>
      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Tell the subclass to refresh the internal bean factory.</span>
      <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Prepare the bean factory for use in this context.</span>
      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">try</span> <span class="token punctuation">{</span>
         <span class="token comment">// Allows post-processing of the bean factory in context subclasses.</span>
         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// Invoke factory processors registered as beans in the context.</span>
         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// Register bean processors that intercept bean creation.</span>
         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// Initialize message source for this context.</span>
         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// Initialize event multicaster for this context.</span>
         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// Initialize other special beans in specific context subclasses.</span>
         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// Check for listener beans and register them.</span>
         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// Instantiate all remaining (non-lazy-init) singletons.</span>
         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// Last step: publish corresponding event.</span>
         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Exception encountered during context initialization - &quot;</span> <span class="token operator">+</span>
                  <span class="token string">&quot;cancelling refresh attempt: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>

         <span class="token comment">// Destroy already created singletons to avoid dangling resources.</span>
         <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// Reset &#39;active&#39; flag.</span>
         <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token comment">// Propagate exception to caller.</span>
         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">finally</span> <span class="token punctuation">{</span>
         <span class="token comment">// Reset common introspection caches in Spring&#39;s core, since we</span>
         <span class="token comment">// might not ever need metadata for singleton beans anymore...</span>
         <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>首先会根据spring配置文件获取到bean的定义信息，并存储到<code>BeanDefinition</code>对象。</p></li><li><p>接下来会先判断是不是<code>FactoryBean</code>，<code>FactoryBean</code>有自己的处理逻辑。普通bean会根据beanName获取。</p></li><li><p>bean的实例化是先创建空对象，然后再填充属性，使用的是深拷贝填充属性。其中会涉及到循环引用。</p></li><li><p>Spring通过<code>bean名称</code>，<code>bean对象</code>，<code>BeanDefinition</code>进行bean的初始化。</p></li><li><p>首先会填充Aware接口相关的资源。接下里进行bean的初始化方法调用，而且在bean的初始化方法前后都会调用bean后置处理器。</p></li><li><p>Spring最终把创建的单例bean放入了一个<code>HashMap</code>中。key是bean的名称，value是bean对象。我们是可以通过bean的名称获取到bean。</p></li></ul>`,90);function T(O,Y){const s=c("ExternalLinkIcon");return i(),t("div",null,[n("div",W,[X,n("p",null,[a("三更草堂："),n("a",Z,[a("https://www.bilibili.com/video/BV1Bq4y1Q7GZ"),o(s)])])]),Q])}const J=e(H,[["render",T],["__file","01.Spring容器中Bean的创建.html.vue"]]);export{J as default};
