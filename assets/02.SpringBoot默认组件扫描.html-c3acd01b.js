import{_ as n,V as a,W as s,X as i}from"./framework-a569e214.js";const o="/img/springboot-code/image-20221230145752924.png",e="/img/springboot-code/image-20221230145907761.png",t="/img/springboot-code/image-20221230150145852.png",p="/img/springboot-code/image-20221230150832763.png",c="/img/springboot-code/image-20221230150934970.png",g="/img/springboot-code/image-20221230151106523.png",l="/img/springboot-code/image-20221230151638955.png",r="/img/springboot-code/image-20221230151829290.png",d="/img/springboot-code/image-20221230151938110.png",u="/img/springboot-code/image-20221230152208536.png",m="/img/springboot-code/image-20221230152428016.png",k="/img/springboot-code/image-20221230152738416.png",f="/img/springboot-code/image-20221230153031588.png",b="/img/springboot-code/image-20221230153259486.png",v="/img/springboot-code/image-20221230153349096.png",_="/img/springboot-code/image-20221230153627558.png",y="/img/springboot-code/image-20221230153816265.png",x="/img/springboot-code/image-20221230154141937.png",B="/img/springboot-code/image-20221230154507406.png",C="/img/springboot-code/image-20221230154735360.png",h="/img/springboot-code/image-20221230155436292.png",S="/img/springboot-code/image-20221230155717578.png",z="/img/springboot-code/image-20221230155827568.png",P="/img/springboot-code/image-20221230160307927.png",q="/img/springboot-code/image-20221230160426075.png",w="/img/springboot-code/image-20221230160653413.png",A="/img/springboot-code/image-20221230160958281.png",D="/img/springboot-code/image-20221230162352119.png",j="/img/springboot-code/image-20221230162735732.png",M="/img/springboot-code/image-20221230163415159.png",U={},F=i(`<h2 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h2><p>我们在主启动类同一目录建一个包<code>config</code>。里面用配置类注册一个bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1473587915</span><span class="token punctuation">,</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主启动类直接获取bean：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootAnalysisApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SpringBootAnalysisApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootAnalysisApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;user: {}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sanfen<span class="token punctuation">.</span></span>SpringBootAnalysisApp</span>         <span class="token operator">:</span> user<span class="token operator">:</span> <span class="token class-name">User</span><span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1473587915</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">&#39;李四&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>没问题。这里就有个问题了，我们没有配置包扫描，SpringBoot是如何找到<code>MyConfig</code>类中的bean进行注册的。合理猜测，<code>SpringBoot有一个默认的扫包规则，会扫描主启动类所在包及其子包下的加了相应注解的bean</code>。</p><h2 id="探究目标" tabindex="-1"><a class="header-anchor" href="#探究目标" aria-hidden="true">#</a> 探究目标</h2><p>SpringBoot项目没有配置包扫描，为什么会默认扫描启动类所在的包？</p><h2 id="springboot默认包扫描解析" tabindex="-1"><a class="header-anchor" href="#springboot默认包扫描解析" aria-hidden="true">#</a> SpringBoot默认包扫描解析</h2><p>主启动类有一个注解<code>@SpringBootApplication</code>。点进去看看：</p><figure><img src="`+o+'" alt="image-20221230145752924" tabindex="0" loading="lazy"><figcaption>image-20221230145752924</figcaption></figure><p>这里我们发现了包扫描注解。说明是会扫包的。所以接下来看看是怎么做的。</p><p>关键代码还是在main方法第一行，执行完这行之后，bean就已经被注册到Spring容器中。</p><p>注意：这次我们探究的是默认包扫描，所以其他的不需要关注。如果全部关注的话，会影响我们的探究。因为SpringBoot和Spring源码太复杂了。只关注当前关心的。</p><figure><img src="'+e+'" alt="image-20221230145907761" tabindex="0" loading="lazy"><figcaption>image-20221230145907761</figcaption></figure><p>什么时候可以停止探究呢？只要发现容器中有了自定义的bean，说明已经扫包了。重点看扫包的过程。</p><blockquote><p>1.进入<code>SpringApplication</code>的<code>refresh()</code>方法。</p></blockquote><figure><img src="'+t+'" alt="image-20221230150145852" tabindex="0" loading="lazy"><figcaption>image-20221230150145852</figcaption></figure><blockquote><p>2.最后我们在<code>AbstractApplicationContext</code>中的<code>refresh()</code>中发现了关键代码。</p></blockquote><figure><img src="'+p+'" alt="image-20221230150832763" tabindex="0" loading="lazy"><figcaption>image-20221230150832763</figcaption></figure><p>执行完这行之后，beanName就有了。说明被扫描到了。</p><figure><img src="'+c+'" alt="image-20221230150934970" tabindex="0" loading="lazy"><figcaption>image-20221230150934970</figcaption></figure><p>进入<code>invokeBeanFactoryPostProcessors()</code>一探究竟。</p><p>进入<code>AbstractApplicationContext</code>的<code>invokeBeanFactoryPostProcessors()</code>方法：</p><figure><img src="'+g+'" alt="image-20221230151106523" tabindex="0" loading="lazy"><figcaption>image-20221230151106523</figcaption></figure><p>经过调试（查看beanName），我们发现关键代码就是第一行。</p><blockquote><p>3.进入<code>PostProcessorRegistrationDelegate</code>的<code>invokeBeanFactoryPostProcessors()</code>方法。</p></blockquote><figure><img src="'+l+'" alt="image-20221230151638955" tabindex="0" loading="lazy"><figcaption>image-20221230151638955</figcaption></figure><p>进入<code>invokeBeanDefinitionRegistryPostProcessors()</code>方法：</p><figure><img src="'+r+'" alt="image-20221230151829290" tabindex="0" loading="lazy"><figcaption>image-20221230151829290</figcaption></figure><blockquote><p>4.进入<code>ConfigurationClassPostProcessor</code>的<code>postProcessBeanDefinitionRegistry()</code>方法。</p></blockquote><figure><img src="'+d+'" alt="image-20221230151938110" tabindex="0" loading="lazy"><figcaption>image-20221230151938110</figcaption></figure><p>进入<code>processConfigBeanDefinitions()</code>方法：</p><figure><img src="'+u+'" alt="image-20221230152208536" tabindex="0" loading="lazy"><figcaption>image-20221230152208536</figcaption></figure><p>往下走，看什么时候我们定义的bean出现了。</p><figure><img src="'+m+'" alt="image-20221230152428016" tabindex="0" loading="lazy"><figcaption>image-20221230152428016</figcaption></figure><p>我们用了<code>@Configuration</code>，注意看。</p><figure><img src="'+k+'" alt="image-20221230152738416" tabindex="0" loading="lazy"><figcaption>image-20221230152738416</figcaption></figure><p><code>myConfig</code>就是我们的配置类，里面我们注册了一个bean。说明SpringBoot扫描到了这个类。关键代码。</p><blockquote><p>5.进入<code>ConfigurationClassParser</code>中的<code>parse()</code>方法。</p></blockquote><figure><img src="'+f+'" alt="image-20221230153031588" tabindex="0" loading="lazy"><figcaption>image-20221230153031588</figcaption></figure><figure><img src="'+b+'" alt="image-20221230153259486" tabindex="0" loading="lazy"><figcaption>image-20221230153259486</figcaption></figure><p>进入<code>parse()</code>方法：</p><figure><img src="'+v+'" alt="image-20221230153349096" tabindex="0" loading="lazy"><figcaption>image-20221230153349096</figcaption></figure><p>进入<code>processConfigurationClass()</code>方法：</p><figure><img src="'+_+'" alt="image-20221230153627558" tabindex="0" loading="lazy"><figcaption>image-20221230153627558</figcaption></figure><p>进入<code>doProcessConfigurationClass()</code>方法：</p><figure><img src="'+y+'" alt="image-20221230153816265" tabindex="0" loading="lazy"><figcaption>image-20221230153816265</figcaption></figure><p>然后会执行到这里，处理包扫描注解：</p><figure><img src="'+x+'" alt="image-20221230154141937" tabindex="0" loading="lazy"><figcaption>image-20221230154141937</figcaption></figure><p>我们没有写<code>@ComponentScan</code>，为什么会走到这里呢？其实我们写了，主启动类上有个<code>@SpringBootApplication</code>这个注解里面就包含了包扫描。</p><figure><img src="'+B+'" alt="image-20221230154507406" tabindex="0" loading="lazy"><figcaption>image-20221230154507406</figcaption></figure><blockquote><p>6.进入<code>ComponentScanAnnotationParser</code>（组件扫描注解解析器）的<code>parse()</code>方法。</p></blockquote><figure><img src="'+C+'" alt="image-20221230154735360" tabindex="0" loading="lazy"><figcaption>image-20221230154735360</figcaption></figure><p>因为我们没有配置包扫描，所以是SpringBoot的默认配置。SpringBoot没有配置扫描的路径。所以解析注解<code>@ComponentScan</code>得到的basePackages是空的。</p><figure><img src="'+h+'" alt="image-20221230155436292" tabindex="0" loading="lazy"><figcaption>image-20221230155436292</figcaption></figure><p>这时候会把主启动类所在的包（<code>declaringClass</code>是传入的参数，主启动类所在的包）添加到basePackages中。</p><figure><img src="'+S+'" alt="image-20221230155717578" tabindex="0" loading="lazy"><figcaption>image-20221230155717578</figcaption></figure><p>接下来扫描包，进行处理，扫描的是主启动类所在的包：</p><figure><img src="'+z+'" alt="image-20221230155827568" tabindex="0" loading="lazy"><figcaption>image-20221230155827568</figcaption></figure><p>到这里，我们就可以确定并验证：<code>SpringBoot会扫描主启动类所在的包</code>。接下来看看会不会递归扫描子包。</p><blockquote><p>7.进入<code>ClassPathBeanDefinitionScanner</code>中的<code>doScan()</code>方法。</p></blockquote><p>这个方法的主要功能：<code>在指定的基本包中执行扫描，返回已注册的bean定义（BeanDefinition）</code>。 此方法不注册注释配置处理器，而是将其留给调用者。</p><figure><img src="'+P+'" alt="image-20221230160307927" tabindex="0" loading="lazy"><figcaption>image-20221230160307927</figcaption></figure><p>看这行代码，扫描到了MyConfig配置类，并且解析成了BeanDefinition对象：</p><figure><img src="'+q+'" alt="image-20221230160426075" tabindex="0" loading="lazy"><figcaption>image-20221230160426075</figcaption></figure><blockquote><p>8.进入<code>ClassPathScanningCandidateComponentProvider</code>中的<code>findCandidateComponents()</code>方法</p></blockquote><figure><img src="'+w+'" alt="image-20221230160653413" tabindex="0" loading="lazy"><figcaption>image-20221230160653413</figcaption></figure><p>进入<code>scanCandidateComponents()</code>方法：</p><figure><img src="'+A+`" alt="image-20221230160958281" tabindex="0" loading="lazy"><figcaption>image-20221230160958281</figcaption></figure><p>为了测试是否会扫描子包，我们在config包下新建一个user包，里面添加一个配置类<code>MyConfig2</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sanfen<span class="token punctuation">.</span>config<span class="token punctuation">.</span>user</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> HeJin
 * <span class="token keyword">@date</span> 2022/12/30 14:47
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig2</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来重新debug到上面那个地方，<code>ClassPathScanningCandidateComponentProvider</code>中的<code>scanCandidateComponents()</code>方法：</p><figure><img src="`+D+'" alt="image-20221230162352119" tabindex="0" loading="lazy"><figcaption>image-20221230162352119</figcaption></figure><p>这个方法最后返回的是两个自定义配置类：</p><figure><img src="'+j+'" alt="image-20221230162735732" tabindex="0" loading="lazy"><figcaption>image-20221230162735732</figcaption></figure><p>发现，SpringBoot默认确实会扫描主启动类及其子包下加了相应注解的bean。这里获取到的是class文件。我们可以返回去看看，这个class文件会变成什么。</p><blockquote><p>9.返回<code>ClassPathBeanDefinitionScanner</code>中的<code>doScan()</code>方法。</p></blockquote><figure><img src="'+M+'" alt="image-20221230163415159" tabindex="0" loading="lazy"><figcaption>image-20221230163415159</figcaption></figure><p>这里我们发现，会把扫描的的bean定义信息（BeanDefinition）注册到<code>BeanDefinitionRegistry</code>。通过<code>BeanDefinition</code>就可以创建bean。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>SpringBoot默认会扫描主启动类所在的包及其子包下的加了相应注解的类，主启动类加了<code>@SpringBootApplication</code>，包扫描就是在这个注解中。</li><li>SpringBoot的包注解没有配置basePackages，所以在解析注解的时候<code>basePackages集合</code>是空的。但是SpringBoot会将主启动类所在的包加入到<code>basePackages集合</code>。为什么能获取到主启动类所在的包？因为程序的入口就是在这里，我们是从这里开始执行的。当然可以获取到主启动类所在的包了。</li><li>SpringBoot的包扫描首先扫描获取到的是bean编译后的class文件，然后通过反射把class文件解析成<code>BeanDefinition</code>对象，并把<code>BeanDefinition</code>进行注册。</li><li>有了扫描到并解析之后的<code>BeanDefinition</code>对象，就可以创建bean了。</li></ul>',84),R=[F];function L(N,V){return a(),s("div",null,R)}const H=n(U,[["render",L],["__file","02.SpringBoot默认组件扫描.html.vue"]]);export{H as default};
