import{_ as a,V as n,W as s,X as e}from"./framework-a569e214.js";const t="/img/spring-code/image-20221229133708894.png",i="/img/spring-code/image-20221229133854414.png",p="/img/spring-code/image-20221229134244730.png",o="/img/spring-code/image-20221229134453161.png",c="/img/spring-code/image-20221229135827062.png",l="/img/spring-code/image-20221229135919990.png",g="/img/spring-code/image-20221229140101632.png",u="/img/spring-code/image-20221229140213587.png",r="/img/spring-code/image-20221229140456133.png",d="/img/spring-code/image-20221229140633781.png",m="/img/spring-code/image-20221229134714631.png",k="/img/spring-code/image-20221229134932871.png",b="/img/spring-code/image-20221229140823717.png",f="/img/spring-code/image-20221229141014545.png",v="/img/spring-code/image-20221229141159969.png",_="/img/spring-code/image-20221229142126808.png",y="/img/spring-code/image-20221229142315844.png",x="/img/spring-code/image-20221229142459383.png",h="/img/spring-code/image-20221229142738502.png",q="/img/spring-code/image-20221229143022406.png",B="/img/spring-code/image-20221229143234305.png",z="/img/spring-code/image-20221229143421139.png",N="/img/spring-code/image-20221229143527516.png",S={},j=e(`<h2 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码" aria-hidden="true">#</a> 测试代码</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.sanfen.entity.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2233<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>27<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SpringDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;user对象: [{}]&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="探究目标" tabindex="-1"><a class="header-anchor" href="#探究目标" aria-hidden="true">#</a> 探究目标</h2><p>之前我们已经大概知道了bean是什么时候创建的，而且知道了bean是怎么被创建的。最后创建的bean被保存到了一个HashMap中。现在需要知道的是：<code>Spring容器中bean具体是怎样获取的</code>。关键代码就是一行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="spring容器中bean的获取流程" tabindex="-1"><a class="header-anchor" href="#spring容器中bean的获取流程" aria-hidden="true">#</a> Spring容器中bean的获取流程</h2><h3 id="根据beanname获取bean" tabindex="-1"><a class="header-anchor" href="#根据beanname获取bean" aria-hidden="true">#</a> 根据beanName获取bean</h3><p>打个断点：</p><figure><img src="`+t+'" alt="image-20221229133708894" tabindex="0" loading="lazy"><figcaption>image-20221229133708894</figcaption></figure><blockquote><p>1.进入<code>AbstractApplicationContext</code>的<code>getBean()</code>方法。</p></blockquote><figure><img src="'+i+'" alt="image-20221229133854414" tabindex="0" loading="lazy"><figcaption>image-20221229133854414</figcaption></figure><p>这里我们可以发现，bean是从<code>BeanFactory</code>获取的。换言之，bean存储于<code>BeanFactory</code>对象中。</p><blockquote><p>2.进入<code>AbstractRefreshableApplicationContext</code>中的<code>getBeanFactory()</code>方法。</p></blockquote><figure><img src="'+p+'" alt="image-20221229134244730" tabindex="0" loading="lazy"><figcaption>image-20221229134244730</figcaption></figure><p><code>BeanFactory</code>里面存储了bean的许多信息，比如定义信息、bean名称、单例bean对象等等。</p><blockquote><p>3.进入<code>AbstractBeanFactory</code>中的<code>getBean()</code>方法。</p></blockquote><figure><img src="'+o+'" alt="image-20221229134453161" tabindex="0" loading="lazy"><figcaption>image-20221229134453161</figcaption></figure><p>进入<code>doGetBean()</code>：</p><p>获取bean的名字。</p><figure><img src="'+c+'" alt="image-20221229135827062" tabindex="0" loading="lazy"><figcaption>image-20221229135827062</figcaption></figure><p>获取单例bean对象：</p><figure><img src="'+l+'" alt="image-20221229135919990" tabindex="0" loading="lazy"><figcaption>image-20221229135919990</figcaption></figure><p><code>beanInstance</code>的获取：</p><figure><img src="'+g+'" alt="image-20221229140101632" tabindex="0" loading="lazy"><figcaption>image-20221229140101632</figcaption></figure><figure><img src="'+u+'" alt="image-20221229140213587" tabindex="0" loading="lazy"><figcaption>image-20221229140213587</figcaption></figure><p><code>AbstractBeanFactory</code>中的<code>getObjectForBeanInstance()</code>方法：</p><figure><img src="'+r+'" alt="image-20221229140456133" tabindex="0" loading="lazy"><figcaption>image-20221229140456133</figcaption></figure><figure><img src="'+d+'" alt="image-20221229140633781" tabindex="0" loading="lazy"><figcaption>image-20221229140633781</figcaption></figure><p>进入<code>adaptBeanInstance()</code>：</p><figure><img src="'+m+'" alt="image-20221229134714631" tabindex="0" loading="lazy"><figcaption>image-20221229134714631</figcaption></figure><p>往下走：</p><figure><img src="'+k+`" alt="image-20221229134932871" tabindex="0" loading="lazy"><figcaption>image-20221229134932871</figcaption></figure><p>这里就获取到了bean，bean的类型是Object，使用的时候我们进行了强转。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>现在我们可以判断bean的获取是在这里：</p></blockquote><figure><img src="`+b+'" alt="image-20221229140823717" tabindex="0" loading="lazy"><figcaption>image-20221229140823717</figcaption></figure><p>进入<code>DefaultSingletonBeanRegistry</code>的<code>getSingleton()</code>方法：</p><figure><img src="'+f+'" alt="image-20221229141014545" tabindex="0" loading="lazy"><figcaption>image-20221229141014545</figcaption></figure><p>获取bean对象：</p><figure><img src="'+v+`" alt="image-20221229141159969" tabindex="0" loading="lazy"><figcaption>image-20221229141159969</figcaption></figure><p>到这里我们发现是从<code>singletonObjects</code>Map集合中根据名称获取对象，这就和我们在<code>Spring容器中Bean的创建</code>中的发现一致。</p><blockquote><ul><li>Bean创建好之后，Spring容器会把bean会放到<code>singletonObjects</code>集合中，key是beanName，value是bean对象。</li><li>在获取bean的时候，Spring容器同样回到Map集合中获取bean对象。只不过Spring容器在获取bean的前后都做了大量的工作。</li></ul></blockquote><h3 id="根据beantype获取bean" tabindex="-1"><a class="header-anchor" href="#根据beantype获取bean" aria-hidden="true">#</a> 根据beanType获取bean</h3><p>上面的是根据bean的名称来获取bean，接下来我们看看根据Class获取是怎么样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>AbstractApplicationContext</code>中有多个重载的<code>getBean()</code>方法。之前进入的是<code>public Object getBean(String name) </code>。这次进入了：</p><figure><img src="`+_+'" alt="image-20221229142126808" tabindex="0" loading="lazy"><figcaption>image-20221229142126808</figcaption></figure><p>进入<code>DefaultListableBeanFactory</code>的<code>getBean()</code>：</p><figure><img src="'+y+'" alt="image-20221229142315844" tabindex="0" loading="lazy"><figcaption>image-20221229142315844</figcaption></figure><figure><img src="'+x+'" alt="image-20221229142459383" tabindex="0" loading="lazy"><figcaption>image-20221229142459383</figcaption></figure><p>接下来看是怎么获取的bean对象，进入<code>resolveBean()</code>方法：</p><figure><img src="'+h+'" alt="image-20221229142738502" tabindex="0" loading="lazy"><figcaption>image-20221229142738502</figcaption></figure><p>进入<code>resolveNamedBean()</code>方法：</p><figure><img src="'+q+'" alt="image-20221229143022406" tabindex="0" loading="lazy"><figcaption>image-20221229143022406</figcaption></figure><p>这里是根据传入的beanType先获取对应的beanName。一个beanType可能有多个beanName。这里我们只定义了一个User对象，所以只有一个。当有多个的时候，Spring需要解决具体需要哪一个，如果两个bean的类型一致，名称也一样，解决不了，就会报错。</p><figure><img src="'+B+'" alt="image-20221229143234305" tabindex="0" loading="lazy"><figcaption>image-20221229143234305</figcaption></figure><p>进入<code>resolveNamedBean()</code>方法：</p><figure><img src="'+z+'" alt="image-20221229143421139" tabindex="0" loading="lazy"><figcaption>image-20221229143421139</figcaption></figure><p>进入<code>AbstractBeanFactory</code>的<code>getBean()</code>方法：</p><figure><img src="'+N+'" alt="image-20221229143527516" tabindex="0" loading="lazy"><figcaption>image-20221229143527516</figcaption></figure><p>这时候就是根据beanName获取bean了，和上面的流程一样。</p><p>由此可以得出结论：</p><ul><li>根据<code>beanType</code>获取bean首先会在容器中获取到<code>beanType</code>对应的<code>beanName</code>。一个<code>beanType</code>可能会有多个的<code>beanName</code>。如果根据<code>beanType</code>和<code>beanName</code>不能唯一确定一个bean，就会报错。</li><li>之后就会根据获取到的<code>beanName</code>获取bean对象，然后把这个对象进行强制转换，类型是我们传入的Class。</li><li>根据<code>beanType</code>获取bean底层还是通过<code>beanName</code>获取的。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>Bean创建好之后，Spring容器会把bean会放到<code>singletonObjects</code>集合中，key是beanName，value是bean对象。</li><li>在获取bean的时候，Spring容器同样会到Map集合中获取bean对象。只不过Spring容器在获取bean的前后都做了大量的工作。</li><li>根据<code>beanType</code>获取bean底层还是通过<code>beanName</code>获取的。</li><li>根据<code>beanType</code>获取bean首先会在容器中获取到<code>beanType</code>对应的<code>beanName</code>。一个<code>beanType</code>可能会有多个的<code>beanName</code>。如果根据<code>beanType</code>和<code>beanName</code>不能唯一确定一个bean，就会报错。</li><li>之后就会根据获取到的<code>beanName</code>获取bean对象，然后把这个对象进行强制类型转换，类型是我们传入的Class。</li></ul>',66),C=[j];function T(w,A){return n(),s("div",null,C)}const U=a(S,[["render",T],["__file","02.Spring容器中Bean的获取.html.vue"]]);export{U as default};
