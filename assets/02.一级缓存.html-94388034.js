import{_ as n,V as s,W as a,X as e}from"./framework-a569e214.js";const t="/img/mybatis-code/image-20221225105221758.png",p="/img/mybatis-code/image-20221225105518982.png",o="/img/mybatis-code/image-20221225112901812.png",c="/img/mybatis-code/image-20221225113114969.png",i="/img/mybatis-code/image-20221225113623955.png",l="/img/mybatis-code/image-20221225114025545.png",u="/img/mybatis-code/image-20221225115038607.png",r="/img/mybatis-code/image-20221225120025266.png",d="/img/mybatis-code/image-20221225121142380.png",k="/img/mybatis-code/image-20221225134818197.png",m="/img/mybatis-code/image-20221225121716581.png",g="/img/mybatis-code/image-20221225122026786.png",b="/img/mybatis-code/image-20221225130908654.png",f="/img/mybatis-code/image-20221225132049876.png",v={},y=e('<h2 id="缓存体系" tabindex="-1"><a class="header-anchor" href="#缓存体系" aria-hidden="true">#</a> 缓存体系</h2><figure><img src="'+t+'" alt="image-20221225105221758" tabindex="0" loading="lazy"><figcaption>image-20221225105221758</figcaption></figure><h2 id="一级缓存命中场景" tabindex="-1"><a class="header-anchor" href="#一级缓存命中场景" aria-hidden="true">#</a> 一级缓存命中场景</h2><p>缓存一般是key-value的。所以一级缓存key的设计，就会影响到缓存的命中。</p><figure><img src="'+p+`" alt="image-20221225105518982" tabindex="0" loading="lazy"><figcaption>image-20221225105518982</figcaption></figure><h2 id="一级缓存源码分析" tabindex="-1"><a class="header-anchor" href="#一级缓存源码分析" aria-hidden="true">#</a> 一级缓存源码分析</h2><h3 id="一级缓存命中" tabindex="-1"><a class="header-anchor" href="#一级缓存命中" aria-hidden="true">#</a> 一级缓存命中</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFirstCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">User</span> user2 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同一个会话（SqlSession没有关闭），相同的查询sql，相同的查询参数，相同的statement（getMapper底层还是调用的SqlSession的方法），返回行是默认的也相同。</p><figure><img src="`+o+'" alt="image-20221225112901812" tabindex="0" loading="lazy"><figcaption>image-20221225112901812</figcaption></figure><blockquote><p>1.进入<code>MapperProxy</code>动态代理逻辑。</p></blockquote><figure><img src="'+c+'" alt="image-20221225113114969" tabindex="0" loading="lazy"><figcaption>image-20221225113114969</figcaption></figure><blockquote><p>2.进入<code>MapperMethod</code>，根据不同的执行类型调用对应的<code>SqlSession</code>方法执行逻辑。</p></blockquote><figure><img src="'+i+'" alt="image-20221225113623955" tabindex="0" loading="lazy"><figcaption>image-20221225113623955</figcaption></figure><blockquote><p>3.进入<code>DefaultSqlSession</code>，这是<code>SqlSession</code>的实现类。最终会进入该类的<code>selectList()</code>方法。</p></blockquote><figure><img src="'+l+'" alt="image-20221225114025545" tabindex="0" loading="lazy"><figcaption>image-20221225114025545</figcaption></figure><blockquote><p>4.进入<code>CachingExecutor</code>。这个执行器是处理二级缓存相关的逻辑，因为我们第一次查询没有提交，所以二级缓存不会生效。如果你没有开启二级缓存，也不会生效。我们现在主要研究一级缓存，先不关注二级缓存。</p></blockquote><p>首先会进行二级缓存的判断查询，这里我开启了mybatis的二级缓存，所以进入了二级缓存逻辑里面。如果没有开启二级缓存，会直接交给下一个执行器执行。</p><figure><img src="'+u+'" alt="image-20221225115038607" tabindex="0" loading="lazy"><figcaption>image-20221225115038607</figcaption></figure><blockquote><p>5.进入<code>BaseExecutor</code>。这个是执行器的公共抽象类，定义了不同执行器之间的<code>共性</code>。比如一级缓存就是在这里定义的。因为mybatis的一级缓存是默认打开的。也无法关闭，只能配置每次查询刷新缓存达到相同的目的。所以，每次在查数据库之前，都会先查询本地缓存（一级缓存）。因此，把这个逻辑抽离了出来。</p></blockquote><figure><img src="'+r+'" alt="image-20221225120025266" tabindex="0" loading="lazy"><figcaption>image-20221225120025266</figcaption></figure><blockquote><p>6.进入<code>PerpetualCache</code>。这个是处理一级缓存的类。类名翻译过来是<code>永久缓存</code>。也就是说，一级缓存是一直存在的。除非进行修改操作或者关闭程序。</p></blockquote><p><img src="'+d+'" alt="image-20221225121142380" loading="lazy"> 查看<code>BaseExecutor</code>中的<code>update()</code>方法，发现的确有清空本地缓存的操作：</p><figure><img src="'+k+'" alt="image-20221225134818197" tabindex="0" loading="lazy"><figcaption>image-20221225134818197</figcaption></figure><p>也就是说，只要在同一个会话中，会话没有关闭之前。只要有修改操作，这个会话中的一级缓存就会被清空。这和我们之前了解到的一级缓存命中情况是相符的。</p><blockquote><p>7.<code>BaseExecutor</code>中，因为现在我们的查询是符合一级缓存的条件的，所以会查询到数据：</p></blockquote><figure><img src="'+m+'" alt="image-20221225121716581" tabindex="0" loading="lazy"><figcaption>image-20221225121716581</figcaption></figure><p><code>对于如何从数据库查询，可以查看Mybatis执行器中的SqlSession查询流程。</code></p><p>从样就查询到了数据，而且是命中一级缓存的情况。接下来就会把数据按调用链路进行返回。最后我们就从一级缓存中查询到了数据。</p><figure><img src="'+g+'" alt="image-20221225121716581" tabindex="0" loading="lazy"><figcaption>image-20221225121716581</figcaption></figure><h3 id="不走一级缓存" tabindex="-1"><a class="header-anchor" href="#不走一级缓存" aria-hidden="true">#</a> 不走一级缓存</h3><p>如果不满足一级缓存的获取条件，或者是第一次查询，都是会直接从数据库中查询的，查询到数据之后会填充到一级缓存。代码在上面的第7步，<code>BaseExecutor</code>中的<code>queryFromDatabase()</code>方法：</p><figure><img src="'+b+`" alt="image-20221225130908654" tabindex="0" loading="lazy"><figcaption>image-20221225130908654</figcaption></figure><blockquote><p><code>BaseExecutor</code>中</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// doQuery()方法是BaseExecutor定义的抽象方法，负责查询数据库，BaseExecutor只是定义，实现交给具体的子类</span>
<span class="token comment">// 因此查询数据库是由BaseExecutor的子类实现的，常用的有SimpleExecutor(默认)、ReuseExecutor(可重用执行器：预编译)、BatchExecutor(批量处理执行器)</span>
<span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">doQuery</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>
  localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">EXECUTION_PLACEHOLDER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    list <span class="token operator">=</span> <span class="token function">doQuery</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    localCache<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 数据库中查询的数据list，会放入一级缓存（HashMap）  </span>
  localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span><span class="token constant">CALLABLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    localOutputParameterCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>具体执行器中的doQuery()方法实现，可以查看Mybatis执行器中的SqlSession查询流程分析。</code></p><h3 id="一级缓存执行流程" tabindex="-1"><a class="header-anchor" href="#一级缓存执行流程" aria-hidden="true">#</a> 一级缓存执行流程</h3><figure><img src="`+f+'" alt="image-20221225132049876" tabindex="0" loading="lazy"><figcaption>image-20221225132049876</figcaption></figure>',38),h=[y];function _(S,x){return s(),a("div",null,h)}const E=n(v,[["render",_],["__file","02.一级缓存.html.vue"]]);export{E as default};
