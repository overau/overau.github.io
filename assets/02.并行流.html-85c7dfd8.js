const t=JSON.parse('{"key":"v-20248e96","path":"/functional/06.%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/02.%E5%B9%B6%E8%A1%8C%E6%B5%81.html","title":"并行流","lang":"zh-CN","frontmatter":{"title":"并行流","date":"2022-03-24T17:51:15.000Z","category":["函数式编程","高级用法"],"description":"当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完全。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用stream的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。 只有一个线程在计算： 使用并行流： 会发现有多个线程在工作： 并...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/functional/06.%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/02.%E5%B9%B6%E8%A1%8C%E6%B5%81.html"}],["meta",{"property":"og:site_name","content":"真理并无尽头"}],["meta",{"property":"og:title","content":"并行流"}],["meta",{"property":"og:description","content":"当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完全。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用stream的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。 只有一个线程在计算： 使用并行流： 会发现有多个线程在工作： 并..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-17T16:10:08.000Z"}],["meta",{"property":"article:published_time","content":"2022-03-24T17:51:15.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-17T16:10:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并行流\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-24T17:51:15.000Z\\",\\"dateModified\\":\\"2023-02-17T16:10:08.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1676650208000,"updatedTime":1676650208000,"contributors":[{"name":"HeJin","email":"deciphers@163.com","commits":1}]},"readingTime":{"minutes":1.25,"words":376},"filePathRelative":"functional/06.高级用法/02.并行流.md","localizedDate":"2022年3月24日","autoDesc":true}');export{t as data};
