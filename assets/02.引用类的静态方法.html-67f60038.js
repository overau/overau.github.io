const t=JSON.parse('{"key":"v-2910b79c","path":"/functional/05.%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/02.%E5%BC%95%E7%94%A8%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95.html","title":"引用类的静态方法","lang":"zh-CN","frontmatter":{"title":"引用类的静态方法","date":"2022-03-24T17:49:05.000Z","category":["函数式编程","方法引用"],"description":"格式 使用前提 如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了某个类的静态方法。并且我们把要重写的抽象方法中所有的参数都按照顺序传入了这个静态方法中，这个时候我们就可以引用类的静态方法。 valueOf是String的静态方法，也满足方法引用的前提。这里我们可以直接使用方法引用：","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/functional/05.%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/02.%E5%BC%95%E7%94%A8%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"真理并无尽头"}],["meta",{"property":"og:title","content":"引用类的静态方法"}],["meta",{"property":"og:description","content":"格式 使用前提 如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了某个类的静态方法。并且我们把要重写的抽象方法中所有的参数都按照顺序传入了这个静态方法中，这个时候我们就可以引用类的静态方法。 valueOf是String的静态方法，也满足方法引用的前提。这里我们可以直接使用方法引用："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-17T16:41:17.000Z"}],["meta",{"property":"article:published_time","content":"2022-03-24T17:49:05.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-17T16:41:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"引用类的静态方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-24T17:49:05.000Z\\",\\"dateModified\\":\\"2023-02-17T16:41:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1676652077000,"updatedTime":1676652077000,"contributors":[{"name":"HeJin","email":"deciphers@163.com","commits":1}]},"readingTime":{"minutes":0.77,"words":230},"filePathRelative":"functional/05.方法引用/02.引用类的静态方法.md","localizedDate":"2022年3月24日","autoDesc":true}');export{t as data};
