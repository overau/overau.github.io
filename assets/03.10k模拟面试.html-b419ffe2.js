import{_ as e,V as r,W as t,Y as a,Z as o,$ as i,X as n,F as l}from"./framework-a569e214.js";const p={},c=n(`<h1 id="_10k模拟面试" tabindex="-1"><a class="header-anchor" href="#_10k模拟面试" aria-hidden="true">#</a> 10k模拟面试</h1><h2 id="_1-java中面向对象的理解" tabindex="-1"><a class="header-anchor" href="#_1-java中面向对象的理解" aria-hidden="true">#</a> 1.java中面向对象的理解</h2><p>Java是一门面向对象的语言，在Java里一切皆对象。面向对象是把整个需求按照特点、功能划分，将这些存在共性的部分封装成类（类实例化后才是对象），让对象去解决对应的问题。而java中的面向对象，主要表现在三个方面：<strong>封装</strong>、<strong>继承</strong>、<strong>多态</strong>。</p><ul><li>封装：把一类事物的行为和属性抽象出来，封装成一个类。然后根据这个类去构建具体的事物（实例对象）。这样就可以对一类事物进行统一定义和管理。</li><li>继承：一个类可以继承一个类，被继承的类我们称之为【父类】或者【超类】，另一个类称之为【子类】也叫【派生类】。继承可以解决<strong>代码复用</strong>的问题。因为某些类具有相同或者相似的行为，就可以使用继承。<strong>所有类的父类是Object</strong>。被final修饰的类不能被继承。</li><li>多态：<strong>同一个行为</strong>具有多个不同表现形式或者说形态的能力。 <ul><li>（1）形成条件有三个：<strong>继承</strong>、<strong>重写</strong>和<strong>父类引用指向子类对象</strong>。</li><li>（2）在Java中有<strong>编译类型</strong>和<strong>运行时类型</strong>，前者在<strong>编译的时候</strong>就能确定具体调用哪个版本的方法，字节码指令执行时直接调用即可，而动态类型必须等待<strong>运行时</strong>才能确定类型。</li><li>（3）<strong>常量池</strong>是我们的资源仓库，里边保存了大量的<strong>符号引用</strong>（就是的你给类、方法、变量的名字），这些符号引用有一部分会在类加载阶段或者第一次使用的时候就被转化为【直接引用】，这种转化叫做<strong>静态解析</strong>，另一部分会在运行期间转化为直接引用，这一部分称之为<strong>动态链接</strong>。</li><li>（4）抽象类和接口： <ul><li>抽象类是为了<strong>约定</strong>，存在的目的就是为了让子类去继承。本类需要实现的功能就在本类实现，需要让子类实现的功能就直接定义好方法即可。<strong>抽象类必须有子类</strong>，抽象类不能直接实例化，需要依靠子类采用<strong>向上转型</strong>的方式处理。</li><li>接口是比抽象类更高级的抽象，接口中只能有方法的定义，接口是契约、是约定子类必须具备的某些<strong>能力</strong>，是需要子类去实现的。接口是多实现的，一个类可以实现多个接口，但是只能继承一个类。接口之间也可以相互继承。继承是 is-a 的关系， dog is an animal。 man is a human。实现是 can-do的关系， <strong>实现更体现一个类的能力</strong>，通过实现多个接口是可以聚合多个能力的。</li><li>抽象类是<strong>模板式</strong>的设计，而接口是<strong>契约式</strong>设计。抽象类设计时往往就是将相同实现方法抽象在父类，由子类独立实现那些实现各自不同的实现。</li></ul></li><li>（5）好处：提高了代码的维护性(继承保证)；提高了代码的扩展性(由多态保证)。弊端：不能使用子类的特有功能。</li></ul></li></ul><h2 id="_2-创建线程的方式" tabindex="-1"><a class="header-anchor" href="#_2-创建线程的方式" aria-hidden="true">#</a> 2.创建线程的方式</h2><ul><li>继承Thread类重写run方法</li><li>实现Runnable接口</li><li>实现Callable接口</li></ul><h2 id="_3-线程池的七个参数" tabindex="-1"><a class="header-anchor" href="#_3-线程池的七个参数" aria-hidden="true">#</a> 3.线程池的七个参数</h2><blockquote><p>为什么要使用线程池？</p></blockquote><p>(1) 降低资源消耗。 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p><p>(2) 提高响应速度。 当任务到达时，任务可以不需要等到线程创建就能立即执行。</p><p>(3) 提高线程的可管理性。 线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配、调优和监控。</p><blockquote><p>ThreadPoolExecutor</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span>
    <span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>
     <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>
     <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>
     <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>
     <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>
     <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>
     <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>corePoolSize</th><th>指定了线程池里的线程数量，核心线程池大小</th></tr></thead><tbody><tr><td>maximumPoolSize</td><td>指定了线程池里的最大线程数量</td></tr><tr><td>keepAliveTime</td><td>当线程池线程数量大于corePoolSize时候，多出来的空闲线程，多长时间会被销毁</td></tr><tr><td>unit</td><td>时间单位，TimeUnit</td></tr><tr><td>workQueue</td><td>任务队列，用于存放提交但是尚未被执行的任务</td></tr><tr><td>threadFactory</td><td>线程工厂，用于创建线程，线程工厂就是给我们new线程的</td></tr><tr><td>handler</td><td>所谓拒绝策略，是指将任务添加到线程池中时，线程池拒绝该任务所采取的相应策略</td></tr></tbody></table><blockquote><p>常见的工作队列我们有如下选择，这些都是阻塞队列，阻塞队列的意思是，当队列中没有值的时候，取值操作会阻塞，一直等队列中产生值。</p></blockquote><ul><li>ArrayBlockingQueue：基于数组结构的有界阻塞队列，FIFO。</li><li>LinkedBlockingQueue：基于链表结构的有界阻塞队列，FIFO。</li></ul><blockquote><p>线程池提供了四种拒绝策略：</p></blockquote><ul><li>AbortPolicy：直接抛出异常，默认策略；</li><li>CallerRunsPolicy：用调用者所在的线程来执行任务；</li><li>DiscardOldestPolicy：丢弃阻塞队列中最靠前的任务，并执行当前任务；</li><li>DiscardPolicy：直接丢弃任务；</li></ul><blockquote><h4 id="自定义线程池" tabindex="-1"><a class="header-anchor" href="#自定义线程池" aria-hidden="true">#</a> 自定义线程池</h4></blockquote><ol><li>拒绝策略其实很简单，ExecutorService构造时可以不传递拒绝策略，默认使用异常抛出的方式。</li><li>阻塞队列我们搞一个定长的队列就好了，ArrayBlockingQueue&lt;&gt;(DEFAULT_SIZE)</li><li>线程工厂的获取我们可以使用以下的方法： <ul><li>第一种办法，看看原生的怎么搞一个线程工厂。</li><li>Google guava 工具类 提供的 ThreadFactoryBuilder 。</li><li>Apache commons-lang3 提供的 BasicThreadFactory。</li></ul></li></ol><h2 id="_4-hashmap实现原理" tabindex="-1"><a class="header-anchor" href="#_4-hashmap实现原理" aria-hidden="true">#</a> 4.hashmap实现原理</h2>`,21),d={href:"https://blog.csdn.net/androidstarjack/article/details/124507171",target:"_blank",rel:"noopener noreferrer"},h=n(`<p>1.HashMap的底层数据结构</p><p>2.hash的计算规则</p><p>3.默认初始化大小是多少？为啥是这么多？为啥大小都是2的幂？</p><p>4.HashMap的主要参数都有哪些</p><p>5.哈希冲突及解决方法</p><p>6.HashMap如何有效减少碰撞？</p><p>7.HashMap可以实现同步吗？</p><p>8.为啥我们重写equals方法的时候需要重写hashCode方法呢？</p><p>9.HashMap什么时候进行扩容？它是怎么扩容的呢？</p><p>10.JDK1.7扩容的时候为什么要重新Hash呢，为什么不直接复制过去？</p><p>11.和Hashtable的区别是什么？</p><p>12.什么是Java集合中的快速失败（fast-fail）机制?</p><p>13.HashTable一定是线程安全吗？它会有快速失败的时候吗？</p><p>14.为什么String, Interger这样的wrapper类适合作为键？</p><p>15.HashMap的数据结构?</p><p>16.HashMap的工作原理?</p><p>17.当两个对象的hashCode相同会发生什么?</p><p>18.你知道hash的实现吗?为什么要这样实现?</p><p>19.为什么要用异或运算符?</p><p>20.HashMap的table的容量如何确定?loadFactor是什么?该容量如何变化?这种变化会带来什么问题?</p><p>21.HashMap中put方法的过程?</p><p>22.数组扩容的过程?</p><p>23.拉链法导致的链表过深问题为什么不用二叉查找树代替,而选择红黑树?为什么不一直使用红黑树?</p><p>24.说说你对红黑树的见解?</p><p>25.jdk8中对HashMap做了哪些改变?</p><p>26.HashMap,LinkedHashMap,TreeMap有什么区别?</p><p>27.HashMap&amp;TreeMap&amp;LinkedHashMap使用场景?</p><p>28.HashMap和HashTable有什么区别?</p><p>29.HashMap 的底层数组长度为何总是2的n次方</p><p>30.jdk1.8中做了哪些优化优化？</p><p>31.HashMap线程安全方面会出现什么问题</p><p>32.为什么HashMap的底层数组长度为何总是2的n次方</p><p>33.那么为什么默认是16呢？怎么不是4？不是8？</p><p>34.HashMap的不安全体现在哪里？</p><p>35.为什么JDK1.8使用红黑树？</p><p>36.1.8中的扩容为什么逻辑判断更简单</p><p>37.HashMap中容量的初始化</p><p>38.HashMap的put方法的具体流程？</p><p>39.HashMap是怎么解决哈希冲突的？</p><p>40.HashMap为什么不直接使用hashCode()处理后的哈希值直接作为table的下标？</p><p>41.HashMap 的长度为什么是2的幂次方</p><p>42.HashMap 和 ConcurrentHashMap 的区别</p><p>43.ConcurrentHashMap 和 Hashtable 的区别？</p><p>44.ConcurrentHashMap 底层具体实现知道吗？实现原理是什么？</p><p>45.Java中的另一个线程安全的与HashMap极其类似的类是什么?同样是线程安全,它与HashTable在线程同步上有什么不同?</p><p>46.HashMap&amp;ConcurrentHashMap的区别?</p><p>47.为什么ConcurrentHashMap比HashTable效率要高?</p><p>48.针对ConcurrentHashMap锁机制具体分析(JDK1.7VSJDK1.8)?</p><p>49.ConcurrentHashMap在JDK1.8中,为什么要使用内置锁synchronized来代替重入锁ReentrantLock?</p><p>50.ConcurrentHashMap简单介绍?</p><p>51.ConcurrentHashMap的并发度是什么?</p><h2 id="_5-cs和aqs" tabindex="-1"><a class="header-anchor" href="#_5-cs和aqs" aria-hidden="true">#</a> 5.cs和aqs</h2><h2 id="_6-nio" tabindex="-1"><a class="header-anchor" href="#_6-nio" aria-hidden="true">#</a> 6.nio</h2><h2 id="_7-数据库索引" tabindex="-1"><a class="header-anchor" href="#_7-数据库索引" aria-hidden="true">#</a> 7.数据库索引</h2><p>需求：按照a,b,c三个字段查询，如何去建索引</p><p>建立复合索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">index</span> idx_a_b_c <span class="token keyword">user</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_8-数据库索引的种类-为什么建索引" tabindex="-1"><a class="header-anchor" href="#_8-数据库索引的种类-为什么建索引" aria-hidden="true">#</a> 8.数据库索引的种类，为什么建索引</h2><p>聚簇索引和非聚簇索引：MySQL的底层是B+树，数据是存在叶子节点的。叶子结点<strong>同时存储索引和数据</strong>，就是聚簇索引（一般是主键索引）。叶子结点只存储索引，<strong>不存储真正的数据，存储主键ID</strong>，叫做非聚簇索引。非聚簇索引找到确定的索引之后，需要回表（主键索引）查询最后的数据。</p><p>普通索引：</p><p>唯一索引：</p><p>复合索引（联合索引）：</p><p>非聚簇索引：</p><p>哈希索引：</p><p>空间索引：</p><p>创建索引可以大大提高系统的性能。</p><h2 id="_9-mysql更新语句会上锁吗-什么锁" tabindex="-1"><a class="header-anchor" href="#_9-mysql更新语句会上锁吗-什么锁" aria-hidden="true">#</a> 9.mysql更新语句会上锁吗？什么锁</h2><p>如果更新条件不是索引字段，会上表锁。</p><p>更新条件不是索引字段，会上行锁。</p><h2 id="_10-spring框架ioc容器启动过程" tabindex="-1"><a class="header-anchor" href="#_10-spring框架ioc容器启动过程" aria-hidden="true">#</a> 10.Spring框架IOC容器启动过程</h2><blockquote><p>Spring IOC的理解</p></blockquote><ul><li>Spring IOC解决的是<strong>对象管理</strong>和<strong>对象依赖</strong>的问题。之前是我们自己手动new对象，现在则把对象交给Spring的<strong>IOC容器管理</strong>。</li><li>IOC容器可以理解为一个<strong>对象工厂</strong>，工厂管理这些对象的<strong>创建和依赖关系</strong>。我们需要对象的时候，从工厂里面获取就行。</li><li>说起IOC，一般会说到<strong>控制反转</strong>和<strong>依赖注入</strong>。控制反转就是把原本自己掌控的事交给别人来管理。本来是我们自己new对象，现在把<strong>对象的控制权</strong>交给Spring容器了。依赖注入是控制反转的实现方式。对象无需自行创建或者管理自己的依赖关系，依赖关系被<strong>自动注入</strong>到需要它们的对象当中去。</li></ul><blockquote><p>Spring IOC的好处</p></blockquote><ul><li>对象集中进行统一管理，降低耦合度。与工厂模式类似，我们只需要知道怎么从工厂里面获取对象，而不用关系工厂内部是怎么实现的。</li><li>如果项目里面的对象都是new就可以创建的话，没有多个实现类，那么不使用Spring也可以。但是基本上项目里面的实现类是很多的。</li><li>Spring不仅仅是管理创建对象，还有一整套的<strong>Bean生命周期管理</strong>。这样可以很方便的实现功能扩展，比如AOP实现对象增强。</li></ul><blockquote><p>Spring框架IOC容器启动过程</p></blockquote><h2 id="_11-spring框架bean的生命周期" tabindex="-1"><a class="header-anchor" href="#_11-spring框架bean的生命周期" aria-hidden="true">#</a> 11.Spring框架bean的生命周期</h2><ul><li>普通Java对象和Spring所管理Bean实例化的过程是有区别的。 <ul><li>普通Java环境下创建对象：（1）java源码被编译为class文件。（2）等到类被初始化：new、反射等。（3）class文件被虚拟机通过<strong>类加载器</strong>加载的JVM。（4）初始化对象。简单来说，是通过<strong>Class对象作为模板</strong>进而创建出具体的实例。</li><li>Spring所管理的bean：除了<strong>Class对象</strong>，还会使用<strong>BeanDefinition的实例</strong>来描述对象的信息。<strong>Class对象描述了类的信息，BeanDefinition描述了对象的信息。</strong></li></ul></li><li>过程： <ol><li>Spring在启动的时候需要<strong>扫描</strong>在XML/注解/JavaConfig中需要被Spring管理的<strong>Bean信息</strong>。</li><li>然后，把这些信息封装成BeanDefinition。最后会把这些信息放到一个beanDefinitionMap中。key是beanName，value是BeanDefinition对象。这一步就是<strong>将定义的元数据加载起来</strong>，目前<strong>真实对象还没有被实例化</strong>。</li><li>接着会遍历这个beanDefinitionMap，执行BeanFactoryPostProcessor这个<strong>Bean工厂后置处理器</strong>的逻辑。在这里，我们也可以自定义BeanFactoryPostProcessor来对我们定义好的Bean元数据进行获取或者修改。</li><li>BeanFactoryPostProcessor后置处理器执行完之后，就到了实例化对象。Spring里面是通过反射来实现的，一般情况下会通过反射选择合适的构造器来把对象实例化。但这里把对象实例化，<strong>只是把对象给创建出来，而对象具体的属性还没注入</strong>。接下来就是对象的相关<strong>属性注入</strong>（循环依赖问题），属性注入完之后，就是初始化的工作。</li><li>Bean的初始化：首先判断该Bean是否实现了Aware相关的接口，如果存在则填充相关的资源。Aware相关的接口处理完之后，就会到<strong>BeanPostProcessor后置处理器</strong>了。BeanPostProcessor有两个方法，一个是before，一个是after。这个BeanPostProcessor后置处理器是<strong>AOP实现的关键</strong>。</li><li>BeanPostProcessor相关子类的before方法执行完，则执行init相关的方法。在对象实例化之后，我们如果需要初始化工作，就可以在init方法执行（比如把数据库的配置信息同步到redis等）。等init方法执行完之后，就会执行BeanPostProcessor的after方法。到这里，我们就可以获取到对象进行使用了。销毁的时候就看有没有配置相关的destroy方法，执行即可。</li></ol></li><li>循环依赖问题：三级缓存。三级缓存就是3个Map。singletonObjects（一级，日常实际获取Bean的地方）；earlySingletonObjects（二级，还没进行属性注入，由三级缓存放进来）；singletonFactories（三级，Value是一个对象工厂）。 <ol><li>A对象实例化之后，属性注入之前，其实会把A对象放入三级缓存中。key是BeanName，Value是ObjectFactory。</li><li>等到A对象属性注入时，发现依赖B，又去实例化B时。</li><li>B属性注入需要去获取A对象，这里就是从三级缓存里拿出ObjectFactory，从ObjectFactory得到对应的Bean（就是对象A）。把三级缓存的A记录给干掉，然后放到二级缓存中。显然，二级缓存存储的key是BeanName，value就是Bean（这里的Bean还没做完属性注入相关的工作）。</li><li>等到完全初始化之后，就会把二级缓存给remove掉，塞到一级缓存中。我们自己去getBean的时候，实际上拿到的是一级缓存的。</li><li>为什么是三级缓存？我们的对象是单例的，有可能A对象依赖的B对象是有AOP的（B对象需要代理）。假设没有第三级缓存，只有第二级缓存（Value存对象，而不是工厂对象）。那如果有AOP的情况下，岂不是在存入第二级缓存之前都需要先去做AOP代理？这不合适。这里肯定是需要考虑代理的情况的，比如A对象是一个被AOP增量的对象，B依赖A时，得到的A肯定是代理对象的。所以，三级缓存的Value是ObjectFactory，可以从里边拿到<strong>代理对象</strong>。二级缓存存在的必要就是为了<strong>性能</strong>，从三级缓存的工厂里创建出对象，再扔到二级缓存（这样就不用每次都要从工厂里拿）。</li></ol></li></ul><h2 id="_12-spring框架aop" tabindex="-1"><a class="header-anchor" href="#_12-spring框架aop" aria-hidden="true">#</a> 12.Spring框架AOP</h2><ul><li>AOP主要解决的是<strong>非业务代码</strong>的抽取，底层实现技术是<strong>动态代理</strong>。在Spring中实现依赖的<strong>BeanPostProcessor</strong>。所谓的<strong>面向切面编程</strong>就是在<strong>方法前后</strong>增加非业务代码。</li><li>注解 + AOP实现日志。</li></ul><h2 id="_13-spring事务中-什么情况下导致事务失效" tabindex="-1"><a class="header-anchor" href="#_13-spring事务中-什么情况下导致事务失效" aria-hidden="true">#</a> 13.Spring事务中，什么情况下导致事务失效</h2><h2 id="_14-spring框架提供几种事务的传播行为" tabindex="-1"><a class="header-anchor" href="#_14-spring框架提供几种事务的传播行为" aria-hidden="true">#</a> 14.Spring框架提供几种事务的传播行为</h2><h2 id="_15-springboot相比于ssm的优势在哪劣势在哪" tabindex="-1"><a class="header-anchor" href="#_15-springboot相比于ssm的优势在哪劣势在哪" aria-hidden="true">#</a> 15.springboot相比于SSM的优势在哪劣势在哪</h2><h2 id="_16-手写springboot的starter" tabindex="-1"><a class="header-anchor" href="#_16-手写springboot的starter" aria-hidden="true">#</a> 16.手写springboot的starter</h2><h2 id="_17-微服务项目的分布式事务怎么实现" tabindex="-1"><a class="header-anchor" href="#_17-微服务项目的分布式事务怎么实现" aria-hidden="true">#</a> 17.微服务项目的分布式事务怎么实现</h2><h2 id="_18-分布式事务和传统的事务相同点和不同点" tabindex="-1"><a class="header-anchor" href="#_18-分布式事务和传统的事务相同点和不同点" aria-hidden="true">#</a> 18.分布式事务和传统的事务相同点和不同点</h2><h2 id="_19-电商项目退单流程-退一部分" tabindex="-1"><a class="header-anchor" href="#_19-电商项目退单流程-退一部分" aria-hidden="true">#</a> 19.电商项目退单流程，退一部分</h2>`,86);function g(u,b){const s=l("ExternalLinkIcon");return r(),t("div",null,[c,a("p",null,[a("a",d,[o("https://blog.csdn.net/androidstarjack/article/details/124507171"),i(s)])]),h])}const _=e(p,[["render",g],["__file","03.10k模拟面试.html.vue"]]);export{_ as default};
