import{_ as n,V as s,W as e,X as t}from"./framework-a569e214.js";const i="/img/mybatis-code/image-20221225211323386.png",p="/img/mybatis-code/image-20221225140858710.png",a="/img/mybatis-code/image-20221225150357281.png",o="/img/mybatis-code/image-20221225154630256.png",c="/img/mybatis-code/image-20221225155812887.png",l="/img/mybatis-code/image-20221225161314284.png",d="/img/mybatis-code/image-20221225164937141.png",r="/img/mybatis-code/image-20221225165453499.png",u="/img/mybatis-code/image-20221225165524673.png",g="/img/mybatis-code/image-20221225165745935.png",m="/img/mybatis-code/image-20221225170021613.png",k="/img/mybatis-code/image-20221225170335123.png",h="/img/mybatis-code/image-20221225170724279.png",b="/img/mybatis-code/image-20221225170912107.png",f="/img/mybatis-code/image-20221225170954350.png",v="/img/mybatis-code/image-20221225171035534.png",y="/img/mybatis-code/image-20221225171115084.png",_="/img/mybatis-code/image-20221225171720860.png",x={},q=t('<h2 id="二级缓存定义与需求分析" tabindex="-1"><a class="header-anchor" href="#二级缓存定义与需求分析" aria-hidden="true">#</a> 二级缓存定义与需求分析</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>二级缓存也称应用级缓存，与一级缓存不同的是它的作用范围是<code>整个应用</code>，而且可以<code>跨线程</code>。所以二级缓存有更高的命中率，适合缓存一些修改较少的数据。</p><h3 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析" aria-hidden="true">#</a> 需求分析</h3><p>二级缓存是一个完整的缓存解决方案，那应该包含哪些功能呢？这里我们分为核心功能和非核心功能两类。</p><blockquote><p>核心功能</p></blockquote><figure><img src="'+i+'" alt="image-20221225211105969" tabindex="0" loading="lazy"><figcaption>image-20221225211105969</figcaption></figure><blockquote><p>其它功能</p></blockquote><ul><li>过期清理：指清理存放数据过久的数据。</li><li>线程安全：保证缓存可以被多个线程同时使用。</li><li>写安全：当拿到缓存数据后，可对其进行修改，而不影响原本的缓存数据。通常采取做法是对缓存对象进行深拷贝。</li></ul><h2 id="二级缓存组件结构" tabindex="-1"><a class="header-anchor" href="#二级缓存组件结构" aria-hidden="true">#</a> 二级缓存组件结构</h2><h3 id="责任链设计" tabindex="-1"><a class="header-anchor" href="#责任链设计" aria-hidden="true">#</a> 责任链设计</h3><p>这么多的功能，如何才能简单的实现，并保证它的灵活性与扩展性呢？这里MyBatis抽象出<code>Cache接口</code>，其只定义了缓存中最基本的功能方法：</p><ul><li>设置缓存。</li><li>获取缓存。</li><li>清除缓存。</li><li>获取缓存数量。</li></ul><figure><img src="'+p+'" alt="image-20221225140858710" tabindex="0" loading="lazy"><figcaption>image-20221225140858710</figcaption></figure><p>然后上述中每一个功能都会对应一个组件类，并基于<code>装饰者加责任链</code>的模式，将各个组件进行串联。在执行缓存的基本功能时，其它的缓存逻辑会沿着这个责任链依次往下传递。</p><p>这样设计有以下优点：</p><ul><li>职责单一：各个节点只负责自己的逻辑，不需要关心其它节点。</li><li>扩展性强：可根据需要扩展节点、删除节点，还可以调换顺序保证灵活性。</li><li>松耦合：各节点之间没有强制依赖其它节点。而是通过顶层的Cache接口进行间接依赖。</li></ul><h3 id="组件结构" tabindex="-1"><a class="header-anchor" href="#组件结构" aria-hidden="true">#</a> 组件结构</h3><figure><img src="'+a+`" alt="image-20221225150357281" tabindex="0" loading="lazy"><figcaption>image-20221225150357281</figcaption></figure><p>有一些组件没有配置的话，在使用的时候就没有。上图描述的是默认配置下会看到的调用组件。其中<code>PerpetualCache</code>就是我们在一级缓存中看到的那个用于存储一级缓存的HashMap。由此可以发现，二级缓存和一级缓存的存储用的是同一个组件实现，底层都是HashMap，存储于内存中。</p><h2 id="二级缓存使用和命中" tabindex="-1"><a class="header-anchor" href="#二级缓存使用和命中" aria-hidden="true">#</a> 二级缓存使用和命中</h2><h3 id="缓存空间声明" tabindex="-1"><a class="header-anchor" href="#缓存空间声明" aria-hidden="true">#</a> 缓存空间声明</h3><ul><li><p>二级缓存默认是不开启的，需要为其声明缓存空间才可以使用，通过<code>@CacheNamespace </code>或为指定的<code>MappedStatement声明</code>（mapper文件）。</p></li><li><p>声明之后，该缓存为该Mapper所独有，其它Mapper不能访问。如需要多个Mapper共享一个缓存空间可通过@CacheNamespaceRef 或进行引用同一个缓存空间。</p></li><li><p>@CacheNamespace 详细配置见下表：</p><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>implementation</td><td>指定缓存的存储实现类，默认是用HashMap存储在内存当中</td></tr><tr><td>eviction</td><td>指定缓存溢出淘汰实现类，默认LRU ，清除最少使用</td></tr><tr><td>flushInterval</td><td>设置缓存定时全部清空时间，默认不清空</td></tr><tr><td>size</td><td>指定缓存容量，超出后就会按eviction指定算法进行淘汰</td></tr><tr><td>readWrite</td><td>true即通过序列化复制，来保证缓存对象是可读写的，默认true</td></tr><tr><td>blocking</td><td>为每个Key的访问添加阻塞锁，防止缓存击穿</td></tr><tr><td>properties</td><td>为上述组件，配置额外参数，key对应组件中的字段名。</td></tr></tbody></table><h3 id="缓存其它配置" tabindex="-1"><a class="header-anchor" href="#缓存其它配置" aria-hidden="true">#</a> 缓存其它配置</h3></li></ul><p><code>@CacheNamespace </code>还可以通过其它参数来控制二级缓存。</p><table><thead><tr><th>字段</th><th>配置域</th><th>说明</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>true | false</td><td>二级缓存全局开关，默认开启</td></tr><tr><td>useCache</td><td>select|update|insert|delete</td><td>指定的statement是否开启，默认开启</td></tr><tr><td>flushCache</td><td>select|update|insert|delete</td><td>执行sql前是否清空当前二级缓存空间，update默认true。query默认false</td></tr></tbody></table><p>如果sql是用注解编写的，我们可以使用<code>@Options</code>注解配置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@CacheNamespace</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 根据ID查询用户
     * <span class="token keyword">@param</span> <span class="token parameter">id</span> 用户ID
     * <span class="token keyword">@return</span> 用户实体
     */</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user where id = #{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useCache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> flushCache <span class="token operator">=</span> <span class="token class-name">Options<span class="token punctuation">.</span>FlushCachePolicy</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span>
    <span class="token class-name">User</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在mapper文件中直接配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注解和mapper文件用同一个二级缓存空间<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>cache<span class="token operator">-</span>ref namespace<span class="token operator">=</span><span class="token string">&quot;com.sanfen.UserMapper&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">&quot;selectById2&quot;</span> resultType<span class="token operator">=</span><span class="token string">&quot;com.sanfen.User&quot;</span> useCache<span class="token operator">=</span><span class="token string">&quot;true&quot;</span> flushCache<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">&gt;</span>
    select <span class="token operator">*</span> from user where id <span class="token operator">=</span> #<span class="token punctuation">{</span>id<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cachenamespace使用注意点" tabindex="-1"><a class="header-anchor" href="#cachenamespace使用注意点" aria-hidden="true">#</a> @CacheNamespace使用注意点</h3><p>注意：如果我们同时使用了注解<code>@CacheNamespace</code>和在mapper文件里面配置了<code>&lt;cache/&gt;</code>，它们不会使用同一个二级缓存空间。也就是说，在<code>Mapper接口</code>里面注解写的SQL不会走<code>mapper xml文件</code>里面sql的二级缓存。要想这两个文件中的sql使用同一个二级缓存空间，需要在mapper文件里面配置这样配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--注解和mapper文件用同一个二级缓存空间--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache-ref</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.sanfen.UserMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二级缓存命中条件" tabindex="-1"><a class="header-anchor" href="#二级缓存命中条件" aria-hidden="true">#</a> 二级缓存命中条件</h3><p>二级缓存的命中场景与一级缓存类似，不同在于二级可以跨会话使用，还有就是二级缓存的更新，必须是在<code>会话提交之后</code>。</p><ul><li>会话提交后。</li><li>SQL语句、参数相同。</li><li>相同的statement。</li><li>RowBounds相同。</li></ul><p>除了第一个条件，其他和一级缓存是一样的。通过上面的组件结构，我们可以发现二级缓存和一级缓存使用的是同一个存储实现类，而且它们的缓存key也很相似。</p><blockquote><p>为什么要提交之后才能命中缓存?</p></blockquote><figure><img src="`+o+'" alt="image-20221225154630256" tabindex="0" loading="lazy"><figcaption>image-20221225154630256</figcaption></figure><ul><li>如上图两个会话在修改同一数据，当会话二修改后，在将其查询出来，假如它实时填充到二级缓存，而会话一就能过缓存获取修改之后的数据，但实质是修改的数据回滚了，并没真正的提交到数据库。</li><li>所以为了保证数据一致性，二级缓存必须是<code>会话提交之才会真正填充</code>，包括对缓存的清空，也必须是会话正常提交之后才生效。因为提交之后，就不能回滚了，事务就完成了。事务的持久性，已经提交，修改就是永久的。</li></ul><h2 id="二级缓存源码分析" tabindex="-1"><a class="header-anchor" href="#二级缓存源码分析" aria-hidden="true">#</a> 二级缓存源码分析</h2><h3 id="二级缓存结构" tabindex="-1"><a class="header-anchor" href="#二级缓存结构" aria-hidden="true">#</a> 二级缓存结构</h3><p>为了实现会话提交之后才变更二级缓存，MyBatis为每个会话设立了若干个暂存区，<code>当前会话对指定缓存空间的变更，都存放在对应的暂存区，当会话提交之后才会提交到每个暂存区对应的缓存空间</code>。为了统一管理这些暂存区，每个会话都一个唯一的事务缓存管理器。所以这里暂存区也可叫做事务缓存。</p><figure><img src="'+c+'" alt="image-20221225155812887" tabindex="0" loading="lazy"><figcaption>image-20221225155812887</figcaption></figure><blockquote><p>会话、暂存区、二级缓存空间的关系</p></blockquote><figure><img src="'+l+'" alt="image-20221225161314284" tabindex="0" loading="lazy"><figcaption>image-20221225161314284</figcaption></figure><h3 id="二级缓存的存取流程" tabindex="-1"><a class="header-anchor" href="#二级缓存的存取流程" aria-hidden="true">#</a> 二级缓存的存取流程</h3><p>原本会话是通过Executor实现SQL调用，这里基于装饰器模式使用<code>CachingExecutor</code>对SQL调用逻辑进行拦截。以嵌入二级缓存相关逻辑。</p><ul><li><p>查询操作query：当会话调用query() 时，会基于查询语句、参数等数据组成缓存Key，然后尝试从二级缓存中读取数据。读到就直接返回，没有就调用被装饰的Executor去查询数据库，然后在填充至对应的暂存区。</p><p>请注意，这里的<code>查询是实时从缓存空间读取</code>的，而<code>变更，只会记录在暂存区</code>。</p></li><li><p>更新操作update：当执行update操作时，同样会基于查询的语句和参数组成缓存KEY，然后在执行update之前清空缓存。这里<code>清空只针对暂存区，同时记录清空的标记</code>，以便当会话提交之时，依据该标记去清空二级缓存空间。</p><p>如果在查询操作中配置了flushCache=true ，也会执行相同的操作。</p></li><li><p>提交操作commit：当会话执行commit操作后，会将该会话下所有暂存区的变更，更新到对应二级缓存空间去。</p></li></ul><figure><img src="'+d+`" alt="image-20221225164937141" tabindex="0" loading="lazy"><figcaption>image-20221225164937141</figcaption></figure><h3 id="debug二级缓存命中情况" tabindex="-1"><a class="header-anchor" href="#debug二级缓存命中情况" aria-hidden="true">#</a> debug二级缓存命中情况</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 1.必须提交
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cacheTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">SqlSession</span> session1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserMapper</span> mapper1 <span class="token operator">=</span> session1<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper1<span class="token punctuation">.</span><span class="token function">selectById2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    session1<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SqlSession</span> session2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserMapper</span> mapper2 <span class="token operator">=</span> session2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">User</span> user2 <span class="token operator">=</span> mapper2<span class="token punctuation">.</span><span class="token function">selectById2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确保二级缓存配置已经打开。</p><p>分别在第二次查询和<code>CachingExecutor</code>的query方法打断点：</p><figure><img src="`+r+'" alt="image-20221225165453499" tabindex="0" loading="lazy"><figcaption>image-20221225165453499</figcaption></figure><figure><img src="'+u+'" alt="image-20221225165524673" tabindex="0" loading="lazy"><figcaption>image-20221225165524673</figcaption></figure><p>每次查询都是会经过二级缓存的，也就是会进入<code>CachingExecutor</code>的<code>query()</code>方法。所以先让第一次查询放行。</p><blockquote><p>1.第二次查询，进入<code>CachingExecutor</code>的<code>query()</code>方法。</p></blockquote><figure><img src="'+g+'" alt="image-20221225165745935" tabindex="0" loading="lazy"><figcaption>image-20221225165745935</figcaption></figure><p>而且我们观察<code>cache</code>变量，可以发现二级缓存使用的装饰器+责任链：</p><figure><img src="'+m+'" alt="image-20221225170021613" tabindex="0" loading="lazy"><figcaption>image-20221225170021613</figcaption></figure><p>我们没有添加其他的配置，是默认的组件。如果我们修改了配置，会有更多的组件。比如：</p><p><code>BlockingCache</code>： 使用<code>ReentrantLock</code>来防止高速缓存未命中时对数据库的大规模访问，它设置了对高速缓存键的锁定</p><p><code>ScheduledCache</code>：设置定时刷新缓存。</p><p>接下来进入获取二级缓存的逻辑。</p><blockquote><p>2.<code>TransactionalCacheManager</code>的<code>getObject()</code>方法。这里是缓存管理器，接下来会进入暂存区。</p></blockquote><figure><img src="'+k+'" alt="image-20221225170335123" tabindex="0" loading="lazy"><figcaption>image-20221225170335123</figcaption></figure><blockquote><p>3.<code>TransactionalCache</code>的<code>getObject()</code>方法。这里是暂存区。因为是查询，所以会直接从二级缓存空间进行读取。接下来就是责任链调用装饰器对象。</p></blockquote><figure><img src="'+h+'" alt="image-20221225170724279" tabindex="0" loading="lazy"><figcaption>image-20221225170724279</figcaption></figure><blockquote><p>4.进入责任链调用。</p></blockquote><figure><img src="'+a+'" alt="image-20221225150357281" tabindex="0" loading="lazy"><figcaption>image-20221225150357281</figcaption></figure><p>首先是<code>SynchronizedCache</code>：</p><figure><img src="'+b+'" alt="image-20221225170912107" tabindex="0" loading="lazy"><figcaption>image-20221225170912107</figcaption></figure><p>然后是<code>LoggingCache</code>：</p><figure><img src="'+f+'" alt="image-20221225170954350" tabindex="0" loading="lazy"><figcaption>image-20221225170954350</figcaption></figure><p>然后是<code>SerializedCache</code>：</p><figure><img src="'+v+'" alt="image-20221225171035534" tabindex="0" loading="lazy"><figcaption>image-20221225171035534</figcaption></figure><p>然后是<code>LruCache</code>：</p><figure><img src="'+y+'" alt="image-20221225171115084" tabindex="0" loading="lazy"><figcaption>image-20221225171115084</figcaption></figure><p>然后是<code>PerpetualCache</code>，这里是真正存储的逻辑。和一级缓存差不多，把数据存于内存中的HashMap中。</p><figure><img src="'+_+'" alt="image-20221225171720860" tabindex="0" loading="lazy"><figcaption>image-20221225171720860</figcaption></figure><p>由此可以发现，二级缓存的底层存储逻辑是操作HashMap。而且和一级缓存存储的时候用的是同一个类。二级缓存和一级缓存就是规则和命中条件不一样，底层的存储结构是一样的。</p>',81),C=[q];function z(M,S){return s(),e("div",null,C)}const j=n(x,[["render",z],["__file","03.二级缓存.html.vue"]]);export{j as default};
