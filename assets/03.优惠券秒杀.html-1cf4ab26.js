const e=JSON.parse('{"key":"v-01ffb175","path":"/do-project/Redis/03.%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80.html","title":"优惠券秒杀","lang":"zh-CN","frontmatter":{"title":"优惠券秒杀","date":"2023-02-06T13:42:29.000Z","category":["项目实战","Redis项目实战"],"description":"01.全局唯一ID 全局ID生成器，是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性： 唯一性。; 高可用。; 高性能。; 递增性。; 安全性。; 为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其它信息。 image-20230206132835502 ID的组成部分： 符号位：1bit，永远为0。; 时间...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/do-project/Redis/03.%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80.html"}],["meta",{"property":"og:site_name","content":"真理并无尽头"}],["meta",{"property":"og:title","content":"优惠券秒杀"}],["meta",{"property":"og:description","content":"01.全局唯一ID 全局ID生成器，是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性： 唯一性。; 高可用。; 高性能。; 递增性。; 安全性。; 为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其它信息。 image-20230206132835502 ID的组成部分： 符号位：1bit，永远为0。; 时间..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-17T15:21:19.000Z"}],["meta",{"property":"article:published_time","content":"2023-02-06T13:42:29.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-17T15:21:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"优惠券秒杀\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-06T13:42:29.000Z\\",\\"dateModified\\":\\"2023-02-17T15:21:19.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"01.全局唯一ID","slug":"_01-全局唯一id","link":"#_01-全局唯一id","children":[]},{"level":2,"title":"02.Redis实现全局唯一ID","slug":"_02-redis实现全局唯一id","link":"#_02-redis实现全局唯一id","children":[]},{"level":2,"title":"03.添加优惠券","slug":"_03-添加优惠券","link":"#_03-添加优惠券","children":[]},{"level":2,"title":"04.实现秒杀下单","slug":"_04-实现秒杀下单","link":"#_04-实现秒杀下单","children":[{"level":3,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]}]},{"level":2,"title":"05.库存超卖问题","slug":"_05-库存超卖问题","link":"#_05-库存超卖问题","children":[{"level":3,"title":"使用jmeter并发测试","slug":"使用jmeter并发测试","link":"#使用jmeter并发测试","children":[]},{"level":3,"title":"超卖问题分析","slug":"超卖问题分析","link":"#超卖问题分析","children":[]}]},{"level":2,"title":"06.乐观锁解决超卖","slug":"_06-乐观锁解决超卖","link":"#_06-乐观锁解决超卖","children":[]},{"level":2,"title":"07.实现一人一单功能","slug":"_07-实现一人一单功能","link":"#_07-实现一人一单功能","children":[{"level":3,"title":"基本实现","slug":"基本实现","link":"#基本实现","children":[]},{"level":3,"title":"加锁完善","slug":"加锁完善","link":"#加锁完善","children":[]}]},{"level":2,"title":"08.一人一单的并发安全问题","slug":"_08-一人一单的并发安全问题","link":"#_08-一人一单的并发安全问题","children":[]},{"level":2,"title":"09.分布式锁","slug":"_09-分布式锁","link":"#_09-分布式锁","children":[{"level":3,"title":"什么是分布式锁","slug":"什么是分布式锁","link":"#什么是分布式锁","children":[]},{"level":3,"title":"分布式锁的实现","slug":"分布式锁的实现","link":"#分布式锁的实现","children":[]},{"level":3,"title":"基于Redis的分布式锁","slug":"基于redis的分布式锁","link":"#基于redis的分布式锁","children":[]}]}],"git":{"createdTime":1676647279000,"updatedTime":1676647279000,"contributors":[{"name":"木叶萧萧","email":"deciphers@163.com","commits":1}]},"readingTime":{"minutes":9.88,"words":2963},"filePathRelative":"do-project/Redis/03.优惠券秒杀.md","localizedDate":"2023年2月6日","autoDesc":true}');export{e as data};
