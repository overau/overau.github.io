const t=JSON.parse('{"key":"v-3f55f8cc","path":"/functional/05.%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/03.%E5%BC%95%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95.html","title":"引用对象的实例方法","lang":"zh-CN","frontmatter":{"title":"引用对象的实例方法","date":"2022-03-24T17:49:23.000Z","category":["函数式编程","方法引用"],"description":"格式 使用前提 如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了某个对象的成员方法，并且我们把要重写的抽象方法中所有的参数都按照顺序传入了这个成员方法中，这个时候我们就可以引用对象的实例方法。 使用方法引用：","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/functional/05.%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/03.%E5%BC%95%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"真理并无尽头"}],["meta",{"property":"og:title","content":"引用对象的实例方法"}],["meta",{"property":"og:description","content":"格式 使用前提 如果我们在重写方法的时候，方法体中只有一行代码，并且这行代码是调用了某个对象的成员方法，并且我们把要重写的抽象方法中所有的参数都按照顺序传入了这个成员方法中，这个时候我们就可以引用对象的实例方法。 使用方法引用："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T05:11:43.000Z"}],["meta",{"property":"article:published_time","content":"2022-03-24T17:49:23.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T05:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"引用对象的实例方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-24T17:49:23.000Z\\",\\"dateModified\\":\\"2023-03-15T05:11:43.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1678857103000,"updatedTime":1678857103000,"contributors":[{"name":"HeJin","email":"deciphers@163.com","commits":1}]},"readingTime":{"minutes":0.64,"words":192},"filePathRelative":"functional/05.方法引用/03.引用对象的实例方法.md","localizedDate":"2022年3月24日","autoDesc":true}');export{t as data};
