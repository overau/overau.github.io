const e=JSON.parse('{"key":"v-9a643302","path":"/Spring/01.Spring%E5%85%A5%E9%97%A8/04.IOC%E6%9C%AC%E8%B4%A8.html","title":"IOC本质","lang":"zh-CN","frontmatter":{"title":"IOC本质","date":"2022-03-29T20:30:30.000Z","category":["Spring全家桶","Spring入门"],"description":"控制反转IoC（Inversion of Control），是一种设计思想，DI（依赖注入）是实现IoC的一种方法。也有人认为DI只是IoC的另一种说法。; 没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制。控制反转后将对象的创建转移给第三方。个人认为所谓控制反转就是：获得依赖对象的方式...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Spring/01.Spring%E5%85%A5%E9%97%A8/04.IOC%E6%9C%AC%E8%B4%A8.html"}],["meta",{"property":"og:site_name","content":"真理并无尽头"}],["meta",{"property":"og:title","content":"IOC本质"}],["meta",{"property":"og:description","content":"控制反转IoC（Inversion of Control），是一种设计思想，DI（依赖注入）是实现IoC的一种方法。也有人认为DI只是IoC的另一种说法。; 没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制。控制反转后将对象的创建转移给第三方。个人认为所谓控制反转就是：获得依赖对象的方式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-22T03:25:15.000Z"}],["meta",{"property":"article:published_time","content":"2022-03-29T20:30:30.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-22T03:25:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IOC本质\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-29T20:30:30.000Z\\",\\"dateModified\\":\\"2023-02-22T03:25:15.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1677036315000,"updatedTime":1677036315000,"contributors":[{"name":"HeJin","email":"deciphers@163.com","commits":1}]},"readingTime":{"minutes":1.36,"words":408},"filePathRelative":"Spring/01.Spring入门/04.IOC本质.md","localizedDate":"2022年3月29日","autoDesc":true}');export{e as data};
