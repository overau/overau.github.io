import{_ as t,V as e,W as l,X as n}from"./framework-a569e214.js";const o={},d=n('<blockquote><p>1、KV键值对</p></blockquote><ul><li>新浪 - <code>Redis</code></li><li>美团 - Redis + Tair</li><li>阿里、百度 - Redis + Memcache</li></ul><blockquote><p>2、文档型数据库</p></blockquote><ul><li><code>MongoDB</code>（一般必须要掌握） <ul><li>MongoDB是一个基于分布式文件存储的数据库，C++编写的。主要用来处理大量的文档。</li><li>MongoDB是一个基于关系型数据库和非关系型数据库中间的产品。MongoDB是非关系型数据库中功能最丰富，最像关系型数据库的。</li></ul></li><li>CouchDB</li></ul><blockquote><p>3、列存储数据库</p></blockquote><ul><li><code>HBase</code></li><li>分布式文件系统</li></ul><blockquote><p>4、图关系数据库</p></blockquote><ul><li>不是存图形，放的是关系。比如：朋友圈社交网络，广告推荐！</li><li><code>Neo4j</code>、InfoGrid</li></ul><blockquote><p>5、四者对比</p></blockquote><table><thead><tr><th style="text-align:center;"><strong>分类</strong></th><th style="text-align:center;"><strong>Examples举例</strong></th><th style="text-align:center;">典型应用场景</th><th style="text-align:center;">数据模型</th><th style="text-align:center;">优点</th><th style="text-align:center;">缺点</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>键值（key-value）</strong></td><td style="text-align:center;">Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td><td style="text-align:center;">内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td style="text-align:center;">Key 指向 Value 的键值对，通常用hash table来实现</td><td style="text-align:center;">查找速度快</td><td style="text-align:center;">数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td style="text-align:center;"><strong>列存储数据库</strong></td><td style="text-align:center;">Cassandra, HBase, Riak</td><td style="text-align:center;">分布式的文件系统</td><td style="text-align:center;">以列簇式存储，将同一列数据存在一起</td><td style="text-align:center;">查找速度快，可扩展性强，更容易进行分布式扩展</td><td style="text-align:center;">功能相对局限</td></tr><tr><td style="text-align:center;"><strong>文档型数据库</strong></td><td style="text-align:center;">CouchDB, MongoDb</td><td style="text-align:center;">Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td style="text-align:center;">Key-Value对应的键值对，Value为结构化数据</td><td style="text-align:center;">数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td style="text-align:center;">查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td style="text-align:center;"><strong>图形(Graph)数据库</strong></td><td style="text-align:center;">Neo4J, InfoGrid, Infinite Graph</td><td style="text-align:center;">社交网络，推荐系统等。专注于构建关系图谱</td><td style="text-align:center;">图结构</td><td style="text-align:center;">利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td style="text-align:center;">很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案。</td></tr></tbody></table><p>敬畏之心可以使人进步！</p>',11),r=[d];function i(c,a){return e(),l("div",null,r)}const g=t(o,[["render",i],["__file","05.NoSQL的四大分类.html.vue"]]);export{g as default};
