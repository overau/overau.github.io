import{_ as n,V as s,W as a,X as p}from"./framework-a569e214.js";const t="/img/juc/image-20210311124456156.png",e={},o=p(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><blockquote><p>面试必问：单例模式、排序算法、生产者消费者、死锁。</p></blockquote><blockquote><p>大有门道。</p></blockquote><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * @Desc 线程之间的通信问题：生产者消费者问题 等待唤醒，通知唤醒
 * 线程交替执行：A B操作同一个变量 num = 0
 * A num+1
 * B num-1
 * @Author HeJin
 * @Date 2021/3/11 12:23
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Data</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 资源类
 * 判断等待、业务、通知
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 等待</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;==&gt;&quot;</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知其他线程 +1完毕</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 等待</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        num<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;==&gt;&quot;</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知其他线程 -1完毕</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>代码存在的问题：如果有A、B、C、D 4个线程，还安全吗？</p></blockquote><p>两个加线程，两个减线程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Data</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试发现，线程不安全。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">2</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">2</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">2</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">2</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">2</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">2</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="虚假唤醒" tabindex="-1"><a class="header-anchor" href="#虚假唤醒" aria-hidden="true">#</a> 虚假唤醒</h2><blockquote><p>原因：虚假唤醒</p></blockquote><figure><img src="`+t+`" alt="image-20210311124456156" tabindex="0" loading="lazy"><figcaption>image-20210311124456156</figcaption></figure><blockquote><p>解决方法：将if判断改成while。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 资源类
 * 判断等待、业务、通知
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 等待</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;==&gt;&quot;</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知其他线程 +1完毕</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 等待</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        num<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;==&gt;&quot;</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知其他线程 -1完毕</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">B</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">A</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>
<span class="token class-name">C</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">1</span>
<span class="token class-name">D</span><span class="token operator">==</span><span class="token operator">&gt;</span><span class="token number">0</span>

<span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="虚假唤醒原因" tabindex="-1"><a class="header-anchor" href="#虚假唤醒原因" aria-hidden="true">#</a> 虚假唤醒原因</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 等待</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;==&gt;&quot;</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知其他线程 +1完毕</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 等待</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        num<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;==&gt;&quot;</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通知其他线程 -1完毕</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>线程被唤醒后，执行开始的地方是wait之后。</li><li>就是用<strong>if判断</strong>的话，唤醒后线程会从wait之后的代码开始运行，但是<strong>不会重新判断if条件</strong>，直接继续运行if代码块之后的代码。</li><li>使用<strong>while</strong>的话，也会从wait之后的代码运行，但是<strong>唤醒后会重新判断循环条件</strong>，如果不成立再执行while代码块之后的代码块，成立的话继续wait。</li></ul><blockquote><p>拿两个<strong>加法线程</strong>A、B来说，比如A先执行，执行时调用了wait方法，那它会等待，此时会<strong>释放锁</strong>，那么线程B获得锁并且也会执行wait方法，<strong>两个加线程一起等待被唤醒</strong>。此时减线程中的某一个线程执行完毕并且唤醒了这俩加线程，那么这<strong>俩加线程不会一起执行</strong>，其中A获取了锁并且加1，执行完毕之后B再执行。如果是if的话，那么A修改完num后，B不会再去判断num的值，直接会给num+1。如果是while的话，A执行完之后，B还会去判断num的值，因此就不会执行。</p></blockquote>`,23),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(e,[["render",l],["__file","05.传统的生产者消费者问题.html.vue"]]);export{k as default};
