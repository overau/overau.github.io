import{_ as t,V as e,W as p,Y as n,Z as s,$ as o,X as c,F as l}from"./framework-a569e214.js";const i="/img/redis/image-20230204183445256.png",u={},r=n("h2",{id:"hyperloglog用法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hyperloglog用法","aria-hidden":"true"},"#"),s(" HyperLogLog用法")],-1),k=n("p",null,"首先我们搞懂两个概念：",-1),d=n("ul",null,[n("li",null,"UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。"),n("li",null,"PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。")],-1),v=n("p",null,"UV统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到Redis中，数据量会非常恐怖。",-1),g=n("p",null,[s("Hyperloglog(HLL)是从Loglog算法派生的"),n("strong",null,"概率算法"),s("，用于确定非常大的集合的基数，而不需要存储其所有值。")],-1),m={href:"https://juejin.cn/post/6844903785744056333",target:"_blank",rel:"noopener noreferrer"},_=c('<p>Redis中的HLL是基于string结构实现的，<strong>单个HLL的内存永远小于16kb</strong>，内存占用低的令人发指！作为代价，其测量结果是概率性的，有小于0.81％的误差。不过对于UV统计来说，这完全可以忽略。</p><p>Redis中的HyperLogLog相关命令：</p><figure><img src="'+i+`" alt="image-20230204183445256" tabindex="0" loading="lazy"><figcaption>image-20230204183445256</figcaption></figure><h2 id="实现uv统计" tabindex="-1"><a class="header-anchor" href="#实现uv统计" aria-hidden="true">#</a> 实现UV统计</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>
        values<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;user_&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;hl2&quot;</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 统计数量</span>
    <span class="token class-name">Long</span> count <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token string">&quot;hl2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;count = &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>count <span class="token operator">=</span> <span class="token number">997593</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7);function b(h,f){const a=l("ExternalLinkIcon");return e(),p("div",null,[r,k,d,v,g,n("p",null,[s("相关算法原理可以参考："),n("a",m,[s("https://juejin.cn/post/6844903785744056333"),o(a)])]),_])}const y=t(u,[["render",b],["__file","08.UV统计.html.vue"]]);export{y as default};
