import{_ as o,V as i,W as c,Y as e,Z as n,$ as a,X as t,F as p}from"./framework-a569e214.js";const l="/img/redis/image-20201228162523445.png",r="/img/redis/image-20201228162919079.png",d={},u=t('<h2 id="redis数据库" tabindex="-1"><a class="header-anchor" href="#redis数据库" aria-hidden="true">#</a> Redis数据库</h2><blockquote><p>Redis默认有16个数据库。</p></blockquote><figure><img src="'+l+`" alt="image-20201228162523445" tabindex="0" loading="lazy"><figcaption>image-20201228162523445</figcaption></figure><blockquote><p>默认使用的是第0个数据库。可以使用select切换数据库。<code>select</code></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token keyword">select</span> <span class="token number">3</span>	<span class="token comment"># 切换数据库</span>
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> DBSIZE	<span class="token comment"># 查看DB大小</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="image-20201228162919079" tabindex="0" loading="lazy"><figcaption>image-20201228162919079</figcaption></figure><blockquote><p>查看数据库所有的key。<code>keys *</code></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>清空当前数据库。<code>flushdb</code></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> flushdb
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> keys *
<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>清空全部数据库。<code>flushall</code></p></blockquote><h2 id="为什么redis端口号是6379" tabindex="-1"><a class="header-anchor" href="#为什么redis端口号是6379" aria-hidden="true">#</a> 为什么Redis端口号是6379</h2>`,12),k={href:"https://www.zhihu.com/question/20084750",target:"_blank",rel:"noopener noreferrer"},b=t('<blockquote><p>到了给 Redis 选择一个数字作为默认端口号时，Antirez 没有多想，把 &quot;MERZ&quot; 在手机键盘上对应的数字 6379 拿来用了。</p></blockquote><h2 id="redis是单线程-6-0之前" tabindex="-1"><a class="header-anchor" href="#redis是单线程-6-0之前" aria-hidden="true">#</a> Redis是单线程-6.0之前</h2><blockquote><p>明白Redis是很快的。官方表示，Redis是基于内存操作，CPU不是性能瓶颈，Redis的瓶颈是是根据机器的内存和网络带宽。既然可以使用单线程来实现，就使用单线程了！</p></blockquote><p>Redis为什么单线程还这么快？</p><blockquote><p>Redis是C语言写的。官方提供的数据为 100000+的QPS。完全不比同样是使用key-value的Memecache差！</p></blockquote><p>误区</p><blockquote><p>1、高性能的服务器一定是多线程的？</p><p>2、多线程（CPU上下文切换）一定比单线程效率高？</p></blockquote><p>CPU、内存、硬盘的速度要有所了解！</p><p>核心</p><blockquote><p>Redis是将所有的数据全部放在内存中的，所以说使用单线程去操作就是最高的！多线程（CPU上下文切换）是个耗时的操作。对于内存系统来说，如果没有上下文切换，效率就是最高的！多次读写都是在一个CPU上的，在内存情况下，这个就是最佳的方案！</p></blockquote><h2 id="redis-6-0" tabindex="-1"><a class="header-anchor" href="#redis-6-0" aria-hidden="true">#</a> Redis 6.0</h2>',11),m={href:"https://blog.csdn.net/qq_18298439/article/details/106019983",target:"_blank",rel:"noopener noreferrer"};function h(g,_){const s=p("ExternalLinkIcon");return i(),c("div",null,[u,e("p",null,[e("a",k,[n("https://www.zhihu.com/question/20084750"),a(s)])]),b,e("p",null,[e("a",m,[n("https://blog.csdn.net/qq_18298439/article/details/106019983"),a(s)])])])}const q=o(d,[["render",h],["__file","10.Redis的基本知识说明.html.vue"]]);export{q as default};
