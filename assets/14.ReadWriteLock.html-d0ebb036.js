const e=JSON.parse('{"key":"v-00ee3c91","path":"/JavaSE/11.JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14.ReadWriteLock.html","title":"ReadWriteLock","lang":"zh-CN","frontmatter":{"title":"ReadWriteLock","date":"2022-03-23T21:18:58.000Z","category":["Java","JUC并发编程"],"description":"image-20210312105427511 读可以被多线程同时读，写的时候只能由一个线程写。 结果： 读锁和写锁是互斥的，也就是说，写的时候也不能读。但是你不加读锁，那就会写的时候能够异步读。更简单点理解就是：加写锁读写都不可以。加读锁可以读不可以写。 独占锁 写锁。一次只能被一个线程占用。 共享锁 读锁。多个线程可以同时占用。","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/JavaSE/11.JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/14.ReadWriteLock.html"}],["meta",{"property":"og:site_name","content":"真理并无尽头"}],["meta",{"property":"og:title","content":"ReadWriteLock"}],["meta",{"property":"og:description","content":"image-20210312105427511 读可以被多线程同时读，写的时候只能由一个线程写。 结果： 读锁和写锁是互斥的，也就是说，写的时候也不能读。但是你不加读锁，那就会写的时候能够异步读。更简单点理解就是：加写锁读写都不可以。加读锁可以读不可以写。 独占锁 写锁。一次只能被一个线程占用。 共享锁 读锁。多个线程可以同时占用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-17T16:41:17.000Z"}],["meta",{"property":"article:published_time","content":"2022-03-23T21:18:58.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-17T16:41:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ReadWriteLock\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-23T21:18:58.000Z\\",\\"dateModified\\":\\"2023-02-17T16:41:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1676652077000,"updatedTime":1676652077000,"contributors":[{"name":"HeJin","email":"deciphers@163.com","commits":1}]},"readingTime":{"minutes":1.31,"words":392},"filePathRelative":"JavaSE/11.JUC并发编程/14.ReadWriteLock.md","localizedDate":"2022年3月23日","autoDesc":true}');export{e as data};
