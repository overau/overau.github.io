import{_ as n,V as s,W as a,X as t}from"./framework-a569e214.js";const e={},p=t(`<p><code>Thread. State</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span>
<span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">&gt;</span></span>
<span class="token class-name">A</span> thread <span class="token class-name"><span class="token namespace">state<span class="token punctuation">.</span></span> A</span> thread can be in one of the following states<span class="token operator">:</span>
<span class="token constant">NEW</span>
<span class="token class-name">A</span> thread that has not yet started is in <span class="token keyword">this</span> state<span class="token punctuation">.</span>
<span class="token constant">RUNNABLE</span>
<span class="token class-name">A</span> thread executing in the <span class="token class-name">Java</span> virtual machine is in <span class="token keyword">this</span> state<span class="token punctuation">.</span>
<span class="token constant">BLOCKED</span>
<span class="token class-name">A</span> thread that is blocked waiting <span class="token keyword">for</span> a monitor lock is in <span class="token keyword">this</span> state<span class="token punctuation">.</span>
<span class="token constant">WAITING</span>
<span class="token class-name">A</span> thread that is waiting indefinitely <span class="token keyword">for</span> another thread <span class="token keyword">to</span> <span class="token namespace">perform</span> a particular action is in <span class="token keyword">this</span> state<span class="token punctuation">.</span>
<span class="token constant">TIMED_WAITING</span>
<span class="token class-name">A</span> thread that is waiting <span class="token keyword">for</span> another thread <span class="token keyword">to</span> <span class="token namespace">perform</span> an action <span class="token keyword">for</span> up <span class="token keyword">to</span> <span class="token namespace">a</span> specified waiting time is in <span class="token keyword">this</span> state<span class="token punctuation">.</span>
<span class="token constant">TERMINATED</span>
<span class="token class-name">A</span> thread that has exited is in <span class="token keyword">this</span> <span class="token class-name"><span class="token namespace">state<span class="token punctuation">.</span></span>
A</span> thread can be in only one state at a given point in <span class="token class-name"><span class="token namespace">time<span class="token punctuation">.</span></span> These</span> states are virtual machine states which <span class="token keyword">do</span> not reflect any operating system thread states<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线程状态。线程可以处于以下状态之一:</p><ul><li><strong>NEW</strong> 尚未启动的线程处于此状态</li><li><strong>RUNNABLE</strong> 在Java虚拟机中执行的线程处于此状态。</li><li><strong>BLOCKED</strong> 被阻塞等待监视器锁定的线程处于此状态</li><li><strong>WAITING</strong> 正在等待另一个线程执行特定动作的线程处于此状态</li><li><strong>TIMED WAITING</strong> 正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。</li><li><strong>TERMINATED</strong> 已退出的线程处于此状态。</li></ul><p>一个线程可以在给定时间点处于一个状态。这些状态是不反映任何操作系统线程状态的虚拟机状态。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestState</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;//////////////&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 观察状态</span>
        <span class="token class-name">Thread<span class="token punctuation">.</span>State</span> state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动后状态</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//只要线程不终止,就一直输出状态</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">.</span><span class="token constant">TERMINATED</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 更新线程状态</span>
            state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","17.线程状态观测.html.vue"]]);export{k as default};
