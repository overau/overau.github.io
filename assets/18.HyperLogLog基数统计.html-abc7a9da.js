import{_ as n,V as s,W as e,X as a}from"./framework-a569e214.js";const t={},p=a(`<blockquote><p>什么是基数？不重复的元素个数。可以接受误差。</p></blockquote><blockquote><p>简介</p></blockquote><p>Redis2.8.9版本就更新了HyperLogLog数据结构。Redis HyperLogLog 基数统计的算法。</p><blockquote><p>优点：占用的内存是固定的。2^64不同的元素的计数，只需要花费12KB内存。如果要从内存角度来比较的话HyperLogLog首选。</p><p>缺点：0.81%错误率。</p></blockquote><p><code>UV。日活、月活。</code></p><p>传统的方式，set保存用户的ID，然后就可以统计set中的元素数量作为判断标准。这个方式如果保存大量的用户ID，就会比较麻烦。我们的目的是为了计数，而不是保存用户ID。</p><blockquote><p>测试使用</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfadd mykey a b c d e f j h i j a b f g				<span class="token comment"># 创建第1组元素 mykey</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFCOUNT mykey										<span class="token comment"># 统计mykey中元素的基数数量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">10</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfadd mykey2 a b c d e f j h i j a b f g j n p m 	<span class="token comment"># 创建第2组元素 mykey2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFCOUNT mykey2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFMERGE mykey3 mykey mykey2				<span class="token comment"># 合并两组元素mykey、mykey2 =&gt; mykey3 并集</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFCOUNT mykey3							<span class="token comment"># 查看并集的数量</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果允许容错，那么一定可以使用HyperLogLog。</p><p>如果不允许容错，就使用set或者自己的数据类型。</p></blockquote>`,9),o=[p];function c(l,i){return s(),e("div",null,o)}const k=n(t,[["render",c],["__file","18.HyperLogLog基数统计.html.vue"]]);export{k as default};
