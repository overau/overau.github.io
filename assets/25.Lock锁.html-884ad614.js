const e=JSON.parse('{"key":"v-69fc6440","path":"/JavaSE/10.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/25.Lock%E9%94%81.html","title":"Lock锁","lang":"zh-CN","frontmatter":{"title":"Lock锁","date":"2022-03-29T15:40:32.000Z","category":["Java","多线程详解"],"description":"从JDK5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。 java. util. concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁,线程开始访问共享资源之前应先获得Lock对象。 Ree...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/JavaSE/10.%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/25.Lock%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"真理并无尽头"}],["meta",{"property":"og:title","content":"Lock锁"}],["meta",{"property":"og:description","content":"从JDK5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。 java. util. concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁,线程开始访问共享资源之前应先获得Lock对象。 Ree..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-17T16:41:17.000Z"}],["meta",{"property":"article:published_time","content":"2022-03-29T15:40:32.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-17T16:41:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lock锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-29T15:40:32.000Z\\",\\"dateModified\\":\\"2023-02-17T16:41:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1676652077000,"updatedTime":1676652077000,"contributors":[{"name":"HeJin","email":"deciphers@163.com","commits":1}]},"readingTime":{"minutes":1.71,"words":514},"filePathRelative":"JavaSE/10.多线程详解/25.Lock锁.md","localizedDate":"2022年3月29日","autoDesc":true}');export{e as data};
