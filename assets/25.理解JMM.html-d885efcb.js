import{_ as n,V as a,W as s,X as t}from"./framework-a569e214.js";const e="/img/juc/image-20210325162425023.png",l="/img/juc/image-20210325162456262.png",o="/img/juc/image-20210325162533838.png",i={},p=t('<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><blockquote><p>谈谈你对volatile的理解</p></blockquote><p>volatile是<strong>Java虚拟机提供的轻量级的同步机制</strong>。</p><ul><li>保证可见性</li><li><strong>不保证原子性</strong></li><li>禁止指令重排</li></ul><hr><p>如果volition修饰的变量被修改，会通过总线嗅探告知其他线程工作区，其他线程工作区会把这变量设置为无效，然后重新读。</p><hr><h2 id="什么是jmm" tabindex="-1"><a class="header-anchor" href="#什么是jmm" aria-hidden="true">#</a> 什么是JMM</h2><p>Java内存模式。不存在的东西，概念、约定。</p><blockquote><p>关于JMM同步的一些约定</p></blockquote><ul><li>线程解锁前：必须把共享变量立刻刷回主存。</li><li>线程加锁前：必须读取主存中的最新值到工作内存中。</li><li>加锁和解锁是同一把锁。</li></ul><blockquote><p>线程：工作内存、主内存。</p></blockquote><h2 id="八个操作" tabindex="-1"><a class="header-anchor" href="#八个操作" aria-hidden="true">#</a> 八个操作</h2><figure><img src="'+e+'" alt="image-20210325162425023" tabindex="0" loading="lazy"><figcaption>image-20210325162425023</figcaption></figure><blockquote><p>问题</p></blockquote><figure><img src="'+l+`" alt="image-20210325162456262" tabindex="0" loading="lazy"><figcaption>image-20210325162456262</figcaption></figure><blockquote><p>内存交互操作</p></blockquote><p>内存交互操作有8种，虚拟机实现必须保证每一个操作都是原子的，不可在分的（对于double和long类型的变量来说，load、store、read和write操作在某些平台上允许例外）：</p><ul><li>lock（锁定）：作用于主内存的变量，把一个变量标识为线程独占状态。</li><li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li>load（载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中。</li><li>use（使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令。</li><li>assign（赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中。</li><li>store（存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用。</li><li>write（写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。</li></ul><hr><p>JMM对这八种指令的使用，制定了如下规则：</p><ul><li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write。</li><li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存。</li><li>不允许一个线程将没有assign的数据从工作内存同步回主内存。</li><li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施use、store操作之前，必须经过assign和load操作。</li><li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁。</li><li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值。</li><li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量。</li><li>对一个变量进行unlock操作之前，必须把此变量同步回主内存。</li></ul><h2 id="代码实践" tabindex="-1"><a class="header-anchor" href="#代码实践" aria-hidden="true">#</a> 代码实践</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JmmDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// main线程</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 线程1</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果： <img src="`+o+'" alt="image-20210325162533838" loading="lazy"></p><blockquote><p>问题</p></blockquote><p>程序不知道主内存中的值已经修改过了。线程1对主内存的变化是不知道的。</p>',27),c=[p];function u(r,k){return a(),s("div",null,c)}const m=n(i,[["render",u],["__file","25.理解JMM.html.vue"]]);export{m as default};
