import{_ as n,V as s,W as a,X as t}from"./framework-a569e214.js";const e={},l=t(`<h2 id="指令重排" tabindex="-1"><a class="header-anchor" href="#指令重排" aria-hidden="true">#</a> 指令重排</h2><hr><p>写的程序，计算机并不是按照你写的那样去执行的。</p><hr><p>源代码 -&gt; 编译器优化的重排 -&gt; 指令并行也可能重排 -&gt; 内存系统也会重排</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>
x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>
y <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>  <span class="token comment">// 4</span>
我们所期望的：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>
<span class="token number">2</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">4</span> 程序也能跑
<span class="token number">1</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> 程序也能跑
可不可能是<span class="token number">4</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>处理器在进行指令重排的时候，会考虑数据之间的<strong>依赖性</strong>。</p><hr><p>可能造成影响的结果：a、b、x、y默认都是0</p><table><thead><tr><th style="text-align:left;">线程A</th><th style="text-align:left;">线程B</th></tr></thead><tbody><tr><td style="text-align:left;">x = a</td><td style="text-align:left;">y = b</td></tr><tr><td style="text-align:left;">b = 1</td><td style="text-align:left;">a = 2</td></tr></tbody></table><p>正常的结果：x = 0，y = 0。</p><table><thead><tr><th style="text-align:left;"><strong>线程A</strong></th><th style="text-align:left;"><strong>线程B</strong></th></tr></thead><tbody><tr><td style="text-align:left;">b = 1</td><td style="text-align:left;">a = 2</td></tr><tr><td style="text-align:left;">x = a</td><td style="text-align:left;">y = b</td></tr></tbody></table><p>但是可能由于指令重排，导致诡异结果：x = 2，y = 1。</p><h2 id="volatile禁止指令重排" tabindex="-1"><a class="header-anchor" href="#volatile禁止指令重排" aria-hidden="true">#</a> volatile禁止指令重排</h2><blockquote><p>内存屏障。CPU指令。</p></blockquote><ul><li>保证特定的操作的执行顺序。</li><li>可以保证某些变量的内存可见性。</li></ul><p>加上volatile会在编译后的代码块前后加上内存屏障，禁止指令重排。</p>`,18),p=[l];function o(r,c){return s(),a("div",null,p)}const d=n(e,[["render",o],["__file","27.指令重排详解.html.vue"]]);export{d as default};
