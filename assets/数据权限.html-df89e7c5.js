import{_ as n,V as s,W as a,X as t}from"./framework-a569e214.js";const p="/img/ruoyi/DataScope-230105-01.png",e="/img/ruoyi/image-20230105134852835.png",o="/img/ruoyi/image-20230105135534063.png",c={},l=t(`<h2 id="_00-数据权限的必要性" tabindex="-1"><a class="header-anchor" href="#_00-数据权限的必要性" aria-hidden="true">#</a> 00.数据权限的必要性</h2><p>在实际开发中，需要设置用户只能查看哪些部门的数据，这种情况一般称为数据权限。例如对于销售，财务的数据，它们是非常敏感的，因此要求对数据权限进行控制， 对于基于集团性的应用系统而言，就更多需要控制好各自公司的数据了。如设置只能看本公司、或者本部门的数据，对于特殊的领导，可能需要跨部门的数据， 因此程序不能硬编码那个领导该访问哪些数据，需要进行后台的权限和数据权限的控制。</p><h2 id="_01-数据权限的实现思路" tabindex="-1"><a class="header-anchor" href="#_01-数据权限的实现思路" aria-hidden="true">#</a> 01.数据权限的实现思路</h2><ul><li>数据权限的本质就是只能查询当前角色所能够看到的数据，不应该展示所有或者没有权限查看的数据。</li><li>与后端接口权限控制很相似，没有权限的接口就不能访问，只能访问有权限的接口。而数据权限首先能够访问接口（有接口权限），需要对查询做限制。</li><li>如果需要做数据权限过滤，使用自定义注解。然后把<code>数据过滤SQL添加到查询条件</code>中。</li></ul><h2 id="_02-数据权限过滤注解" tabindex="-1"><a class="header-anchor" href="#_02-数据权限过滤注解" aria-hidden="true">#</a> 02.数据权限过滤注解</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 数据权限过滤注解
 * 
 * <span class="token keyword">@author</span> ruoyi
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DataScope</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 部门表的别名
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deptAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 用户表的别名
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">userAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要进行数据权限的方法，直接添加注解即可。</p><h2 id="_03-数据权限过滤切面类" tabindex="-1"><a class="header-anchor" href="#_03-数据权限过滤切面类" aria-hidden="true">#</a> 03.数据权限过滤切面类</h2><h3 id="前端参数接收" tabindex="-1"><a class="header-anchor" href="#前端参数接收" aria-hidden="true">#</a> 前端参数接收</h3><p>由于使用实体类接收前端的参数，而且实体类继承了<code>BaseEntity</code>。在<code>BaseEntity</code>中，有一个字段<code>params</code>用于存储过滤SQL。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** 请求参数 */</span>
<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mapper文件sql" tabindex="-1"><a class="header-anchor" href="#mapper文件sql" aria-hidden="true">#</a> mapper文件SQL</h3><p>把需要进行数据范围过滤的SQL语句添加params：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectUserList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SysUser<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SysUserResult<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   select u.user_id, u.dept_id, u.nick_name, u.user_name, u.email, u.avatar, u.phonenumber, u.sex, u.status, u.del_flag, u.login_ip, u.login_date, u.create_by, u.create_time, u.remark, d.dept_name, d.leader from sys_user u
   left join sys_dept d on u.dept_id = d.dept_id
   where u.del_flag = &#39;0&#39;
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userId != null and userId != 0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      AND u.user_id = #{userId}
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userName != null and userName != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      AND u.user_name like concat(&#39;%&#39;, #{userName}, &#39;%&#39;)
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status != null and status != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      AND u.status = #{status}
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>phonenumber != null and phonenumber != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      AND u.phonenumber like concat(&#39;%&#39;, #{phonenumber}, &#39;%&#39;)
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>params.beginTime != null and params.beginTime != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 开始时间检索 --&gt;</span>
      AND date_format(u.create_time,&#39;%y%m%d&#39;) <span class="token entity named-entity" title="&gt;">&amp;gt;</span>= date_format(#{params.beginTime},&#39;%y%m%d&#39;)
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>params.endTime != null and params.endTime != &#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 结束时间检索 --&gt;</span>
      AND date_format(u.create_time,&#39;%y%m%d&#39;) <span class="token entity named-entity" title="&lt;">&amp;lt;</span>= date_format(#{params.endTime},&#39;%y%m%d&#39;)
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deptId != null and deptId != 0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      AND (u.dept_id = #{deptId} OR u.dept_id IN ( SELECT t.dept_id FROM sys_dept t WHERE find_in_set(#{deptId}, ancestors) ))
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
   <span class="token comment">&lt;!-- 数据范围过滤 --&gt;</span>
   \${params.dataScope}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切面类过滤逻辑" tabindex="-1"><a class="header-anchor" href="#切面类过滤逻辑" aria-hidden="true">#</a> 切面类过滤逻辑</h3><figure><img src="`+p+`" alt="image-20230105140259031" tabindex="0" loading="lazy"><figcaption>image-20230105140259031</figcaption></figure><p><code>DataScopeAspect</code>切面类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(controllerDataScope)&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> point<span class="token punctuation">,</span> <span class="token class-name">DataScope</span> controllerDataScope<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span>
<span class="token punctuation">{</span>
    <span class="token function">clearDataScope</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">handleDataScope</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> controllerDataScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="防止注入" tabindex="-1"><a class="header-anchor" href="#防止注入" aria-hidden="true">#</a> 防止注入</h4><p>拼接权限sql前先清空params.dataScope参数防止注入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 拼接权限sql前先清空params.dataScope参数防止注入
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">clearDataScope</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Object</span> params <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> params <span class="token keyword">instanceof</span> <span class="token class-name">BaseEntity</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">BaseEntity</span> baseEntity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BaseEntity</span><span class="token punctuation">)</span> params<span class="token punctuation">;</span>
        baseEntity<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">DATA_SCOPE</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据权限处理" tabindex="-1"><a class="header-anchor" href="#数据权限处理" aria-hidden="true">#</a> 数据权限处理</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleDataScope</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">DataScope</span> controllerDataScope<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 获取当前的用户</span>
    <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">SysUser</span> currentUser <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果是超级管理员，则不过滤数据</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>currentUser<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>currentUser<span class="token punctuation">.</span><span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">dataScopeFilter</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">,</span> currentUser<span class="token punctuation">,</span> controllerDataScope<span class="token punctuation">.</span><span class="token function">deptAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    controllerDataScope<span class="token punctuation">.</span><span class="token function">userAlias</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据范围过滤：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 数据范围过滤
 *
 * <span class="token keyword">@param</span> <span class="token parameter">joinPoint</span> 切点
 * <span class="token keyword">@param</span> <span class="token parameter">user</span> 用户
 * <span class="token keyword">@param</span> <span class="token parameter">deptAlias</span> 部门别名
 * <span class="token keyword">@param</span> <span class="token parameter">userAlias</span> 用户别名
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dataScopeFilter</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">SysUser</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> deptAlias<span class="token punctuation">,</span> <span class="token class-name">String</span> userAlias<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> sqlString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> conditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SysRole</span> role <span class="token operator">:</span> user<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">String</span> dataScope <span class="token operator">=</span> role<span class="token punctuation">.</span><span class="token function">getDataScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">DATA_SCOPE_CUSTOM</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> conditions<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DATA_SCOPE_ALL</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sqlString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DATA_SCOPE_CUSTOM</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sqlString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
                    <span class="token string">&quot; OR {}.dept_id IN ( SELECT dept_id FROM sys_role_dept WHERE role_id = {} ) &quot;</span><span class="token punctuation">,</span> deptAlias<span class="token punctuation">,</span>
                    role<span class="token punctuation">.</span><span class="token function">getRoleId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DATA_SCOPE_DEPT</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sqlString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot; OR {}.dept_id = {} &quot;</span><span class="token punctuation">,</span> deptAlias<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DATA_SCOPE_DEPT_AND_CHILD</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sqlString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
                    <span class="token string">&quot; OR {}.dept_id IN ( SELECT dept_id FROM sys_dept WHERE dept_id = {} or find_in_set( {} , ancestors ) )&quot;</span><span class="token punctuation">,</span>
                    deptAlias<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getDeptId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DATA_SCOPE_SELF</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>userAlias<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                sqlString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot; OR {}.user_id = {} &quot;</span><span class="token punctuation">,</span> userAlias<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 数据权限为仅本人且没有userAlias别名不查询任何数据</span>
                sqlString<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot; OR {}.dept_id = 0 &quot;</span><span class="token punctuation">,</span> deptAlias<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        conditions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dataScope<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>sqlString<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> params <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> params <span class="token keyword">instanceof</span> <span class="token class-name">BaseEntity</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">BaseEntity</span> baseEntity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BaseEntity</span><span class="token punctuation">)</span> params<span class="token punctuation">;</span>
            baseEntity<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">DATA_SCOPE</span><span class="token punctuation">,</span> <span class="token string">&quot; AND (&quot;</span> <span class="token operator">+</span> sqlString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后把拼接好的数据过滤SQL放入了<code>BaseEntity</code>中的params字段，参数接收实体类也有了。查询时候就会带上拼接的参数。在mapper文件中，使用了<code>\${params.dataScope}</code>把SQL语句拼在了最后。这样就实现了数据范围过滤。</p><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p>拼接的SQL：</p><figure><img src="`+e+'" alt="image-20230105134852835" tabindex="0" loading="lazy"><figcaption>image-20230105134852835</figcaption></figure><p><code> AND (d.dept_id IN ( SELECT dept_id FROM sys_role_dept WHERE role_id = 2 ) )</code>。</p><p>看看数据库查询执行的SQL：</p><figure><img src="'+o+`" alt="image-20230105135534063" tabindex="0" loading="lazy"><figcaption>image-20230105135534063</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">13</span><span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">48.614</span> <span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>r<span class="token punctuation">.</span>s<span class="token punctuation">.</span>m<span class="token punctuation">.</span></span>S</span><span class="token punctuation">.</span>selectUserList <span class="token operator">-</span> <span class="token punctuation">[</span>debug<span class="token punctuation">,</span><span class="token number">137</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">&gt;</span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> select u<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> u<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span> u<span class="token punctuation">.</span>nick_name<span class="token punctuation">,</span> u<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span> u<span class="token punctuation">.</span>email<span class="token punctuation">,</span> u<span class="token punctuation">.</span>avatar<span class="token punctuation">,</span> u<span class="token punctuation">.</span>phonenumber<span class="token punctuation">,</span> u<span class="token punctuation">.</span>sex<span class="token punctuation">,</span> u<span class="token punctuation">.</span>status<span class="token punctuation">,</span> u<span class="token punctuation">.</span>del_flag<span class="token punctuation">,</span> u<span class="token punctuation">.</span>login_ip<span class="token punctuation">,</span> u<span class="token punctuation">.</span>login_date<span class="token punctuation">,</span> u<span class="token punctuation">.</span>create_by<span class="token punctuation">,</span> u<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span> u<span class="token punctuation">.</span>remark<span class="token punctuation">,</span> d<span class="token punctuation">.</span>dept_name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>leader from sys_user u left join sys_dept d on u<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>dept_id where u<span class="token punctuation">.</span>del_flag <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span> <span class="token constant">AND</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>dept_id <span class="token constant">IN</span> <span class="token punctuation">(</span> <span class="token constant">SELECT</span> dept_id <span class="token constant">FROM</span> sys_role_dept <span class="token class-name">WHERE</span> role_id <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token constant">LIMIT</span> <span class="token operator">?</span>
<span class="token number">13</span><span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">48.616</span> <span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>r<span class="token punctuation">.</span>s<span class="token punctuation">.</span>m<span class="token punctuation">.</span></span>S</span><span class="token punctuation">.</span>selectUserList <span class="token operator">-</span> <span class="token punctuation">[</span>debug<span class="token punctuation">,</span><span class="token number">137</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token function">10</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>
<span class="token number">13</span><span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">48.617</span> <span class="token punctuation">[</span>http<span class="token operator">-</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token constant">DEBUG</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>r<span class="token punctuation">.</span>s<span class="token punctuation">.</span>m<span class="token punctuation">.</span></span>S</span><span class="token punctuation">.</span>selectUserList <span class="token operator">-</span> <span class="token punctuation">[</span>debug<span class="token punctuation">,</span><span class="token number">137</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>数据权限或者范围过滤本质上是操作SQL实现的，在查询条件上增加相应的限制。</li><li>我们也可以在每次查询的时候，手动添加数据权限过滤SQL。但是这样就比较麻烦，需要查询的地方都要添加，而且代码是重复的。还有就是，如果自后需要修改数据权限条件的话，需要修改所有的。</li><li>使用自定义注解的好处在于：侵入性少，增强代码可读性及可维护性。使用方便，只需要在对应方法上添加注解即可。如果需要修改过滤逻辑，直接修改切面类即可，不用修改业务代码。</li></ul>`,35),i=[l];function u(k,r){return s(),a("div",null,i)}const m=n(c,[["render",u],["__file","数据权限.html.vue"]]);export{m as default};
